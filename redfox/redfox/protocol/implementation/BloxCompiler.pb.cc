// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../interface/BloxCompiler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace blox {
namespace common {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CompilationProblems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompilationProblems_reflection_ = NULL;
const ::google::protobuf::Descriptor* Problem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Problem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredicateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredicateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Constant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Constant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Constant_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BoolConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsignedIntConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsignedIntConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateTimeConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateTimeConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Type_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PrimitiveType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrimitiveType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PrimitiveType_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnaryPredicateType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnaryPredicateType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Severity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Lifetime_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DerivationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LockingPolicy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageModel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Partitioning_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogicSort_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_BloxCompiler_2eproto() {
  protobuf_AddDesc_BloxCompiler_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BloxCompiler.proto");
  GOOGLE_CHECK(file != NULL);
  CompilationProblems_descriptor_ = file->message_type(0);
  static const int CompilationProblems_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationProblems, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationProblems, warning_),
  };
  CompilationProblems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompilationProblems_descriptor_,
      CompilationProblems::default_instance_,
      CompilationProblems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationProblems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompilationProblems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompilationProblems));
  Problem_descriptor_ = file->message_type(1);
  static const int Problem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, severity_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, quote_),
  };
  Problem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Problem_descriptor_,
      Problem::default_instance_,
      Problem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Problem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Problem));
  Position_descriptor_ = file->message_type(2);
  static const int Position_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, start_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, start_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, end_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, end_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, start_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, end_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, file_name_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  PredicateInfo_descriptor_ = file->message_type(3);
  static const int PredicateInfo_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, qualified_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, arity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, key_arity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, value_arity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, key_argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, value_argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_ref_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_one_to_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_ordered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, has_default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_disjoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, supertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, toptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, has_ref_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, ref_mode_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_meta_predicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_pulse_predicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_calculated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, line_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, derivation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, locking_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, storage_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, partitioning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, role_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_built_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_skolem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_auto_numbered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, actual_default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, delimiter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, has_column_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, delim_column_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_sealed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, local_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, remote_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_synthetic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, is_constructor_),
  };
  PredicateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredicateInfo_descriptor_,
      PredicateInfo::default_instance_,
      PredicateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredicateInfo));
  Constant_descriptor_ = file->message_type(4);
  static const int Constant_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, bool_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, int_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, float_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, string_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, date_time_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, uint_constant_),
  };
  Constant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Constant_descriptor_,
      Constant::default_instance_,
      Constant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Constant));
  Constant_Kind_descriptor_ = Constant_descriptor_->enum_type(0);
  BoolConstant_descriptor_ = file->message_type(5);
  static const int BoolConstant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolConstant, position_),
  };
  BoolConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoolConstant_descriptor_,
      BoolConstant::default_instance_,
      BoolConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoolConstant));
  IntConstant_descriptor_ = file->message_type(6);
  static const int IntConstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntConstant, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntConstant, position_),
  };
  IntConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntConstant_descriptor_,
      IntConstant::default_instance_,
      IntConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntConstant));
  UnsignedIntConstant_descriptor_ = file->message_type(7);
  static const int UnsignedIntConstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedIntConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedIntConstant, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedIntConstant, position_),
  };
  UnsignedIntConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsignedIntConstant_descriptor_,
      UnsignedIntConstant::default_instance_,
      UnsignedIntConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedIntConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedIntConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsignedIntConstant));
  FloatConstant_descriptor_ = file->message_type(8);
  static const int FloatConstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatConstant, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatConstant, position_),
  };
  FloatConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatConstant_descriptor_,
      FloatConstant::default_instance_,
      FloatConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatConstant));
  StringConstant_descriptor_ = file->message_type(9);
  static const int StringConstant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringConstant, position_),
  };
  StringConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringConstant_descriptor_,
      StringConstant::default_instance_,
      StringConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringConstant));
  DateTimeConstant_descriptor_ = file->message_type(10);
  static const int DateTimeConstant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeConstant, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeConstant, position_),
  };
  DateTimeConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateTimeConstant_descriptor_,
      DateTimeConstant::default_instance_,
      DateTimeConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateTimeConstant));
  Type_descriptor_ = file->message_type(11);
  static const int Type_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, primitive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, unary_),
  };
  Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Type_descriptor_,
      Type::default_instance_,
      Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Type));
  Type_Kind_descriptor_ = Type_descriptor_->enum_type(0);
  PrimitiveType_descriptor_ = file->message_type(12);
  static const int PrimitiveType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveType, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveType, capacity_),
  };
  PrimitiveType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrimitiveType_descriptor_,
      PrimitiveType::default_instance_,
      PrimitiveType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrimitiveType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrimitiveType));
  PrimitiveType_Kind_descriptor_ = PrimitiveType_descriptor_->enum_type(0);
  UnaryPredicateType_descriptor_ = file->message_type(13);
  static const int UnaryPredicateType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryPredicateType, name_),
  };
  UnaryPredicateType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnaryPredicateType_descriptor_,
      UnaryPredicateType::default_instance_,
      UnaryPredicateType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryPredicateType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnaryPredicateType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnaryPredicateType));
  Severity_descriptor_ = file->enum_type(0);
  Lifetime_descriptor_ = file->enum_type(1);
  DerivationType_descriptor_ = file->enum_type(2);
  LockingPolicy_descriptor_ = file->enum_type(3);
  StorageModel_descriptor_ = file->enum_type(4);
  Partitioning_descriptor_ = file->enum_type(5);
  LogicSort_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BloxCompiler_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompilationProblems_descriptor_, &CompilationProblems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Problem_descriptor_, &Problem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredicateInfo_descriptor_, &PredicateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Constant_descriptor_, &Constant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoolConstant_descriptor_, &BoolConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntConstant_descriptor_, &IntConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsignedIntConstant_descriptor_, &UnsignedIntConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatConstant_descriptor_, &FloatConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringConstant_descriptor_, &StringConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateTimeConstant_descriptor_, &DateTimeConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Type_descriptor_, &Type::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrimitiveType_descriptor_, &PrimitiveType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnaryPredicateType_descriptor_, &UnaryPredicateType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BloxCompiler_2eproto() {
  delete CompilationProblems::default_instance_;
  delete CompilationProblems_reflection_;
  delete Problem::default_instance_;
  delete Problem_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete PredicateInfo::default_instance_;
  delete PredicateInfo_reflection_;
  delete Constant::default_instance_;
  delete Constant_reflection_;
  delete BoolConstant::default_instance_;
  delete BoolConstant_reflection_;
  delete IntConstant::default_instance_;
  delete IntConstant_reflection_;
  delete UnsignedIntConstant::default_instance_;
  delete UnsignedIntConstant_reflection_;
  delete FloatConstant::default_instance_;
  delete FloatConstant_reflection_;
  delete StringConstant::default_instance_;
  delete StringConstant_reflection_;
  delete DateTimeConstant::default_instance_;
  delete DateTimeConstant_reflection_;
  delete Type::default_instance_;
  delete Type_reflection_;
  delete PrimitiveType::default_instance_;
  delete PrimitiveType_reflection_;
  delete UnaryPredicateType::default_instance_;
  delete UnaryPredicateType_reflection_;
}

void protobuf_AddDesc_BloxCompiler_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BloxCompiler.proto\022\024blox.common.protoc"
    "ol\"s\n\023CompilationProblems\022,\n\005error\030\001 \003(\013"
    "2\035.blox.common.protocol.Problem\022.\n\007warni"
    "ng\030\002 \003(\0132\035.blox.common.protocol.Problem\""
    "\234\001\n\007Problem\022\014\n\004code\030\001 \001(\t\022\013\n\003msg\030\002 \002(\t\0220"
    "\n\010position\030\004 \002(\0132\036.blox.common.protocol."
    "Position\0225\n\rseverity_code\030\005 \002(\0162\036.blox.c"
    "ommon.protocol.Severity\022\r\n\005quote\030\007 \001(\t\"\253"
    "\001\n\010Position\022\022\n\nstart_line\030\001 \002(\r\022\024\n\014start"
    "_column\030\002 \002(\r\022\020\n\010end_line\030\003 \001(\r\022\022\n\nend_c"
    "olumn\030\004 \001(\r\022\024\n\014start_offset\030\005 \001(\r\022\022\n\nend"
    "_offset\030\006 \001(\r\022\022\n\nblock_name\030\007 \002(\t\022\021\n\tfil"
    "e_name\030\010 \001(\t\"\372\t\n\rPredicateInfo\022\014\n\004name\030\001"
    " \002(\t\022\026\n\016qualified_name\030\002 \002(\t\022\r\n\005arity\030\003 "
    "\002(\r\022\021\n\tkey_arity\030\004 \002(\r\022\023\n\013value_arity\030\005 "
    "\002(\r\022\024\n\014key_argument\030\006 \003(\t\022\026\n\016value_argum"
    "ent\030\007 \003(\t\022\030\n\tis_entity\030\010 \002(\010:\005false\022\032\n\013i"
    "s_ref_mode\030\t \002(\010:\005false\022\034\n\ris_one_to_one"
    "\030\n \002(\010:\005false\022\031\n\nis_ordered\030\013 \002(\010:\005false"
    "\022 \n\021has_default_value\030\014 \002(\010:\005false\022\032\n\013is"
    "_disjoint\030\r \002(\010:\005false\022\031\n\nis_subtype\030\016 \002"
    "(\010:\005false\022\021\n\tsupertype\030\017 \001(\t\022\017\n\007toptype\030"
    "* \001(\t\022\033\n\014has_ref_mode\030\020 \002(\010:\005false\022\025\n\rre"
    "f_mode_name\030\021 \001(\t\022 \n\021is_meta_predicate\030\022"
    " \002(\010:\005false\022!\n\022is_pulse_predicate\030\023 \002(\010:"
    "\005false\022\034\n\ris_calculated\030\024 \002(\010:\005false\022\033\n\014"
    "line_numbers\030\025 \002(\010:\005false\022=\n\017derivation_"
    "type\030\026 \002(\0162$.blox.common.protocol.Deriva"
    "tionType\022;\n\016locking_policy\030\027 \002(\0162#.blox."
    "common.protocol.LockingPolicy\0229\n\rstorage"
    "_model\030\030 \002(\0162\".blox.common.protocol.Stor"
    "ageModel\0228\n\014partitioning\030\031 \002(\0162\".blox.co"
    "mmon.protocol.Partitioning\022\027\n\010capacity\030\032"
    " \001(\004:\00532767\022\022\n\nrole_names\030\033 \001(\t\022\032\n\013is_bu"
    "ilt_in\030\034 \001(\010:\005false\022\030\n\tis_skolem\030\035 \002(\010:\005"
    "false\0220\n\010lifetime\030\036 \002(\0162\036.blox.common.pr"
    "otocol.Lifetime\022\030\n\020is_auto_numbered\030\037 \002("
    "\010\022<\n\024actual_default_value\030  \001(\0132\036.blox.c"
    "ommon.protocol.Constant\022\021\n\tfile_path\030! \001"
    "(\t\022\021\n\tdelimiter\030\" \001(\t\022\030\n\020has_column_name"
    "s\030# \001(\010\022\032\n\022delim_column_names\030$ \001(\t\022\030\n\ti"
    "s_sealed\030% \001(\010:\005false\022\022\n\nlocal_name\030& \001("
    "\t\022\024\n\014display_name\030\' \001(\t\022\022\n\nremote_ref\030( "
    "\001(\t\022\024\n\014is_synthetic\030) \001(\010\022\026\n\016is_construc"
    "tor\030+ \001(\010\"\375\003\n\010Constant\0221\n\004kind\030\001 \002(\0162#.b"
    "lox.common.protocol.Constant.Kind\0229\n\rboo"
    "l_constant\030\002 \001(\0132\".blox.common.protocol."
    "BoolConstant\0227\n\014int_constant\030\003 \001(\0132!.blo"
    "x.common.protocol.IntConstant\022;\n\016float_c"
    "onstant\030\004 \001(\0132#.blox.common.protocol.Flo"
    "atConstant\022=\n\017string_constant\030\005 \001(\0132$.bl"
    "ox.common.protocol.StringConstant\022B\n\022dat"
    "e_time_constant\030\006 \001(\0132&.blox.common.prot"
    "ocol.DateTimeConstant\022@\n\ruint_constant\030\007"
    " \001(\0132).blox.common.protocol.UnsignedIntC"
    "onstant\"H\n\004Kind\022\010\n\004BOOL\020\000\022\007\n\003INT\020\001\022\t\n\005FL"
    "OAT\020\002\022\n\n\006STRING\020\003\022\014\n\010DATETIME\020\004\022\010\n\004UINT\020"
    "\005\"O\n\014BoolConstant\022\r\n\005value\030\001 \002(\010\0220\n\010posi"
    "tion\030\002 \001(\0132\036.blox.common.protocol.Positi"
    "on\"x\n\013IntConstant\022\r\n\005value\030\001 \002(\003\022(\n\004type"
    "\030\002 \002(\0132\032.blox.common.protocol.Type\0220\n\010po"
    "sition\030\003 \001(\0132\036.blox.common.protocol.Posi"
    "tion\"\200\001\n\023UnsignedIntConstant\022\r\n\005value\030\001 "
    "\002(\004\022(\n\004type\030\002 \002(\0132\032.blox.common.protocol"
    ".Type\0220\n\010position\030\003 \001(\0132\036.blox.common.pr"
    "otocol.Position\"z\n\rFloatConstant\022\r\n\005valu"
    "e\030\001 \002(\t\022(\n\004type\030\002 \002(\0132\032.blox.common.prot"
    "ocol.Type\0220\n\010position\030\003 \001(\0132\036.blox.commo"
    "n.protocol.Position\"Q\n\016StringConstant\022\r\n"
    "\005value\030\001 \002(\t\0220\n\010position\030\002 \001(\0132\036.blox.co"
    "mmon.protocol.Position\"S\n\020DateTimeConsta"
    "nt\022\r\n\005value\030\001 \001(\003\0220\n\010position\030\002 \001(\0132\036.bl"
    "ox.common.protocol.Position\"\310\001\n\004Type\022-\n\004"
    "kind\030\001 \002(\0162\037.blox.common.protocol.Type.K"
    "ind\0226\n\tprimitive\030\002 \001(\0132#.blox.common.pro"
    "tocol.PrimitiveType\0227\n\005unary\030\003 \001(\0132(.blo"
    "x.common.protocol.UnaryPredicateType\" \n\004"
    "Kind\022\r\n\tPRIMITIVE\020\000\022\t\n\005UNARY\020\001\"\334\001\n\rPrimi"
    "tiveType\0226\n\004kind\030\001 \002(\0162(.blox.common.pro"
    "tocol.PrimitiveType.Kind\022\020\n\010capacity\030\002 \001"
    "(\r\"\200\001\n\004Kind\022\010\n\004BOOL\020\000\022\t\n\005COLOR\020\001\022\t\n\005SHAP"
    "E\020\002\022\t\n\005IMAGE\020\003\022\010\n\004BLOB\020\004\022\014\n\010DATETIME\020\005\022\007"
    "\n\003INT\020\006\022\010\n\004UINT\020\007\022\t\n\005FLOAT\020\010\022\n\n\006STRING\020\t"
    "\022\013\n\007DECIMAL\020\n\"\"\n\022UnaryPredicateType\022\014\n\004n"
    "ame\030\001 \002(\t*8\n\010Severity\022\r\n\tSEV_ERROR\020\000\022\017\n\013"
    "SEV_WARNING\020\001\022\014\n\010SEV_NONE\020\002*6\n\010Lifetime\022"
    "\017\n\013TRANSACTION\020\001\022\014\n\010DATABASE\020\002\022\013\n\007SESSIO"
    "N\020\003*q\n\016DerivationType\022\017\n\013NOT_DERIVED\020\000\022\017"
    "\n\013EXTENSIONAL\020\001\022\013\n\007DERIVED\020\002\022\026\n\022DERIVED_"
    "AND_STORED\020\003\022\030\n\024INTEGRITY_CONSTRAINT\020\004*\?"
    "\n\rLockingPolicy\022\020\n\014BY_PREDICATE\020\000\022\016\n\nBY_"
    "ELEMENT\020\001\022\014\n\010UNLOCKED\020\002*\234\001\n\014StorageModel"
    "\022\n\n\006SPARSE\020\000\022\t\n\005DENSE\020\001\022\020\n\014DELTA_SPARSE\020"
    "\002\022\013\n\007CHUNKED\020\003\022\022\n\016DELIMITED_FILE\020\004\022\017\n\013BI"
    "NARY_FILE\020\005\022\014\n\010RAW_FILE\020\006\022\023\n\017SCALABLE_SP"
    "ARSE\020\007\022\016\n\nTCP_STREAM\020\010*N\n\014Partitioning\022\017"
    "\n\013PARTITIONED\020\000\022\016\n\nREPLICATED\020\001\022\017\n\013MASTE"
    "R_ONLY\020\002\022\014\n\010FRAGMENT\020\003*k\n\tLogicSort\022\n\n\006A"
    "CTIVE\020\001\022\014\n\010INACTIVE\020\002\022\013\n\007EXECUTE\020\003\022\033\n\027IN"
    "ACTIVE_AFTER_FIXPOINT\020\004\022\032\n\026EXECUTE_AFTER"
    "_FIXPOINT\020\005B.\n\035com.logicblox.common.prot"
    "ocolB\013CommonProtoH\001", 4059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BloxCompiler.proto", &protobuf_RegisterTypes);
  CompilationProblems::default_instance_ = new CompilationProblems();
  Problem::default_instance_ = new Problem();
  Position::default_instance_ = new Position();
  PredicateInfo::default_instance_ = new PredicateInfo();
  Constant::default_instance_ = new Constant();
  BoolConstant::default_instance_ = new BoolConstant();
  IntConstant::default_instance_ = new IntConstant();
  UnsignedIntConstant::default_instance_ = new UnsignedIntConstant();
  FloatConstant::default_instance_ = new FloatConstant();
  StringConstant::default_instance_ = new StringConstant();
  DateTimeConstant::default_instance_ = new DateTimeConstant();
  Type::default_instance_ = new Type();
  PrimitiveType::default_instance_ = new PrimitiveType();
  UnaryPredicateType::default_instance_ = new UnaryPredicateType();
  CompilationProblems::default_instance_->InitAsDefaultInstance();
  Problem::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  PredicateInfo::default_instance_->InitAsDefaultInstance();
  Constant::default_instance_->InitAsDefaultInstance();
  BoolConstant::default_instance_->InitAsDefaultInstance();
  IntConstant::default_instance_->InitAsDefaultInstance();
  UnsignedIntConstant::default_instance_->InitAsDefaultInstance();
  FloatConstant::default_instance_->InitAsDefaultInstance();
  StringConstant::default_instance_->InitAsDefaultInstance();
  DateTimeConstant::default_instance_->InitAsDefaultInstance();
  Type::default_instance_->InitAsDefaultInstance();
  PrimitiveType::default_instance_->InitAsDefaultInstance();
  UnaryPredicateType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BloxCompiler_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BloxCompiler_2eproto {
  StaticDescriptorInitializer_BloxCompiler_2eproto() {
    protobuf_AddDesc_BloxCompiler_2eproto();
  }
} static_descriptor_initializer_BloxCompiler_2eproto_;

const ::google::protobuf::EnumDescriptor* Severity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Severity_descriptor_;
}
bool Severity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Lifetime_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lifetime_descriptor_;
}
bool Lifetime_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DerivationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DerivationType_descriptor_;
}
bool DerivationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LockingPolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockingPolicy_descriptor_;
}
bool LockingPolicy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StorageModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageModel_descriptor_;
}
bool StorageModel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Partitioning_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Partitioning_descriptor_;
}
bool Partitioning_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogicSort_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicSort_descriptor_;
}
bool LogicSort_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CompilationProblems::kErrorFieldNumber;
const int CompilationProblems::kWarningFieldNumber;
#endif  // !_MSC_VER

CompilationProblems::CompilationProblems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompilationProblems::InitAsDefaultInstance() {
}

CompilationProblems::CompilationProblems(const CompilationProblems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompilationProblems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompilationProblems::~CompilationProblems() {
  SharedDtor();
}

void CompilationProblems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompilationProblems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompilationProblems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompilationProblems_descriptor_;
}

const CompilationProblems& CompilationProblems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

CompilationProblems* CompilationProblems::default_instance_ = NULL;

CompilationProblems* CompilationProblems::New() const {
  return new CompilationProblems;
}

void CompilationProblems::Clear() {
  error_.Clear();
  warning_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompilationProblems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .blox.common.protocol.Problem error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_error;
        if (input->ExpectTag(18)) goto parse_warning;
        break;
      }
      
      // repeated .blox.common.protocol.Problem warning = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warning()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_warning;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompilationProblems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .blox.common.protocol.Problem error = 1;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(i), output);
  }
  
  // repeated .blox.common.protocol.Problem warning = 2;
  for (int i = 0; i < this->warning_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->warning(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompilationProblems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .blox.common.protocol.Problem error = 1;
  for (int i = 0; i < this->error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(i), target);
  }
  
  // repeated .blox.common.protocol.Problem warning = 2;
  for (int i = 0; i < this->warning_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->warning(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompilationProblems::ByteSize() const {
  int total_size = 0;
  
  // repeated .blox.common.protocol.Problem error = 1;
  total_size += 1 * this->error_size();
  for (int i = 0; i < this->error_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->error(i));
  }
  
  // repeated .blox.common.protocol.Problem warning = 2;
  total_size += 1 * this->warning_size();
  for (int i = 0; i < this->warning_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warning(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompilationProblems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompilationProblems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompilationProblems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompilationProblems::MergeFrom(const CompilationProblems& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_.MergeFrom(from.error_);
  warning_.MergeFrom(from.warning_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompilationProblems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompilationProblems::CopyFrom(const CompilationProblems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationProblems::IsInitialized() const {
  
  for (int i = 0; i < error_size(); i++) {
    if (!this->error(i).IsInitialized()) return false;
  }
  for (int i = 0; i < warning_size(); i++) {
    if (!this->warning(i).IsInitialized()) return false;
  }
  return true;
}

void CompilationProblems::Swap(CompilationProblems* other) {
  if (other != this) {
    error_.Swap(&other->error_);
    warning_.Swap(&other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompilationProblems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompilationProblems_descriptor_;
  metadata.reflection = CompilationProblems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Problem::kCodeFieldNumber;
const int Problem::kMsgFieldNumber;
const int Problem::kPositionFieldNumber;
const int Problem::kSeverityCodeFieldNumber;
const int Problem::kQuoteFieldNumber;
#endif  // !_MSC_VER

Problem::Problem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Problem::InitAsDefaultInstance() {
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

Problem::Problem(const Problem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Problem::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  severity_code_ = 0;
  quote_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Problem::~Problem() {
  SharedDtor();
}

void Problem::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (quote_ != &::google::protobuf::internal::kEmptyString) {
    delete quote_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void Problem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Problem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Problem_descriptor_;
}

const Problem& Problem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

Problem* Problem::default_instance_ = NULL;

Problem* Problem::New() const {
  return new Problem;
}

void Problem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
    severity_code_ = 0;
    if (has_quote()) {
      if (quote_ != &::google::protobuf::internal::kEmptyString) {
        quote_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Problem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }
      
      // required .blox.common.protocol.Position position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_severity_code;
        break;
      }
      
      // required .blox.common.protocol.Severity severity_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::Severity_IsValid(value)) {
            set_severity_code(static_cast< blox::common::protocol::Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quote;
        break;
      }
      
      // optional string quote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quote().data(), this->quote().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Problem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // required .blox.common.protocol.Position position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }
  
  // required .blox.common.protocol.Severity severity_code = 5;
  if (has_severity_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->severity_code(), output);
  }
  
  // optional string quote = 7;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->quote(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Problem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // required .blox.common.protocol.Position position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }
  
  // required .blox.common.protocol.Severity severity_code = 5;
  if (has_severity_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->severity_code(), target);
  }
  
  // optional string quote = 7;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->quote(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Problem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // required .blox.common.protocol.Position position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .blox.common.protocol.Severity severity_code = 5;
    if (has_severity_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity_code());
    }
    
    // optional string quote = 7;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quote());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Problem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Problem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Problem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Problem::MergeFrom(const Problem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
    if (from.has_severity_code()) {
      set_severity_code(from.severity_code());
    }
    if (from.has_quote()) {
      set_quote(from.quote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Problem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Problem::CopyFrom(const Problem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Problem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void Problem::Swap(Problem* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(position_, other->position_);
    std::swap(severity_code_, other->severity_code_);
    std::swap(quote_, other->quote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Problem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Problem_descriptor_;
  metadata.reflection = Problem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kStartLineFieldNumber;
const int Position::kStartColumnFieldNumber;
const int Position::kEndLineFieldNumber;
const int Position::kEndColumnFieldNumber;
const int Position::kStartOffsetFieldNumber;
const int Position::kEndOffsetFieldNumber;
const int Position::kBlockNameFieldNumber;
const int Position::kFileNameFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  start_line_ = 0u;
  start_column_ = 0u;
  end_line_ = 0u;
  end_column_ = 0u;
  start_offset_ = 0u;
  end_offset_ = 0u;
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_line_ = 0u;
    start_column_ = 0u;
    end_line_ = 0u;
    end_column_ = 0u;
    start_offset_ = 0u;
    end_offset_ = 0u;
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 start_line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_line_)));
          set_has_start_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_column;
        break;
      }
      
      // required uint32 start_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_column_)));
          set_has_start_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_line;
        break;
      }
      
      // optional uint32 end_line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_line_)));
          set_has_end_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_column;
        break;
      }
      
      // optional uint32 end_column = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_column_)));
          set_has_end_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_offset;
        break;
      }
      
      // optional uint32 start_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_offset_)));
          set_has_start_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_offset;
        break;
      }
      
      // optional uint32 end_offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_offset_)));
          set_has_end_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_block_name;
        break;
      }
      
      // required string block_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 start_line = 1;
  if (has_start_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_line(), output);
  }
  
  // required uint32 start_column = 2;
  if (has_start_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_column(), output);
  }
  
  // optional uint32 end_line = 3;
  if (has_end_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_line(), output);
  }
  
  // optional uint32 end_column = 4;
  if (has_end_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_column(), output);
  }
  
  // optional uint32 start_offset = 5;
  if (has_start_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_offset(), output);
  }
  
  // optional uint32 end_offset = 6;
  if (has_end_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_offset(), output);
  }
  
  // required string block_name = 7;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->block_name(), output);
  }
  
  // optional string file_name = 8;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->file_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 start_line = 1;
  if (has_start_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_line(), target);
  }
  
  // required uint32 start_column = 2;
  if (has_start_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_column(), target);
  }
  
  // optional uint32 end_line = 3;
  if (has_end_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_line(), target);
  }
  
  // optional uint32 end_column = 4;
  if (has_end_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_column(), target);
  }
  
  // optional uint32 start_offset = 5;
  if (has_start_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_offset(), target);
  }
  
  // optional uint32 end_offset = 6;
  if (has_end_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_offset(), target);
  }
  
  // required string block_name = 7;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->block_name(), target);
  }
  
  // optional string file_name = 8;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->file_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 start_line = 1;
    if (has_start_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_line());
    }
    
    // required uint32 start_column = 2;
    if (has_start_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_column());
    }
    
    // optional uint32 end_line = 3;
    if (has_end_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_line());
    }
    
    // optional uint32 end_column = 4;
    if (has_end_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_column());
    }
    
    // optional uint32 start_offset = 5;
    if (has_start_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_offset());
    }
    
    // optional uint32 end_offset = 6;
    if (has_end_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_offset());
    }
    
    // required string block_name = 7;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional string file_name = 8;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_line()) {
      set_start_line(from.start_line());
    }
    if (from.has_start_column()) {
      set_start_column(from.start_column());
    }
    if (from.has_end_line()) {
      set_end_line(from.end_line());
    }
    if (from.has_end_column()) {
      set_end_column(from.end_column());
    }
    if (from.has_start_offset()) {
      set_start_offset(from.start_offset());
    }
    if (from.has_end_offset()) {
      set_end_offset(from.end_offset());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;
  
  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(start_line_, other->start_line_);
    std::swap(start_column_, other->start_column_);
    std::swap(end_line_, other->end_line_);
    std::swap(end_column_, other->end_column_);
    std::swap(start_offset_, other->start_offset_);
    std::swap(end_offset_, other->end_offset_);
    std::swap(block_name_, other->block_name_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PredicateInfo::kNameFieldNumber;
const int PredicateInfo::kQualifiedNameFieldNumber;
const int PredicateInfo::kArityFieldNumber;
const int PredicateInfo::kKeyArityFieldNumber;
const int PredicateInfo::kValueArityFieldNumber;
const int PredicateInfo::kKeyArgumentFieldNumber;
const int PredicateInfo::kValueArgumentFieldNumber;
const int PredicateInfo::kIsEntityFieldNumber;
const int PredicateInfo::kIsRefModeFieldNumber;
const int PredicateInfo::kIsOneToOneFieldNumber;
const int PredicateInfo::kIsOrderedFieldNumber;
const int PredicateInfo::kHasDefaultValueFieldNumber;
const int PredicateInfo::kIsDisjointFieldNumber;
const int PredicateInfo::kIsSubtypeFieldNumber;
const int PredicateInfo::kSupertypeFieldNumber;
const int PredicateInfo::kToptypeFieldNumber;
const int PredicateInfo::kHasRefModeFieldNumber;
const int PredicateInfo::kRefModeNameFieldNumber;
const int PredicateInfo::kIsMetaPredicateFieldNumber;
const int PredicateInfo::kIsPulsePredicateFieldNumber;
const int PredicateInfo::kIsCalculatedFieldNumber;
const int PredicateInfo::kLineNumbersFieldNumber;
const int PredicateInfo::kDerivationTypeFieldNumber;
const int PredicateInfo::kLockingPolicyFieldNumber;
const int PredicateInfo::kStorageModelFieldNumber;
const int PredicateInfo::kPartitioningFieldNumber;
const int PredicateInfo::kCapacityFieldNumber;
const int PredicateInfo::kRoleNamesFieldNumber;
const int PredicateInfo::kIsBuiltInFieldNumber;
const int PredicateInfo::kIsSkolemFieldNumber;
const int PredicateInfo::kLifetimeFieldNumber;
const int PredicateInfo::kIsAutoNumberedFieldNumber;
const int PredicateInfo::kActualDefaultValueFieldNumber;
const int PredicateInfo::kFilePathFieldNumber;
const int PredicateInfo::kDelimiterFieldNumber;
const int PredicateInfo::kHasColumnNamesFieldNumber;
const int PredicateInfo::kDelimColumnNamesFieldNumber;
const int PredicateInfo::kIsSealedFieldNumber;
const int PredicateInfo::kLocalNameFieldNumber;
const int PredicateInfo::kDisplayNameFieldNumber;
const int PredicateInfo::kRemoteRefFieldNumber;
const int PredicateInfo::kIsSyntheticFieldNumber;
const int PredicateInfo::kIsConstructorFieldNumber;
#endif  // !_MSC_VER

PredicateInfo::PredicateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredicateInfo::InitAsDefaultInstance() {
  actual_default_value_ = const_cast< ::blox::common::protocol::Constant*>(&::blox::common::protocol::Constant::default_instance());
}

PredicateInfo::PredicateInfo(const PredicateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredicateInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qualified_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arity_ = 0u;
  key_arity_ = 0u;
  value_arity_ = 0u;
  is_entity_ = false;
  is_ref_mode_ = false;
  is_one_to_one_ = false;
  is_ordered_ = false;
  has_default_value_ = false;
  is_disjoint_ = false;
  is_subtype_ = false;
  supertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_ref_mode_ = false;
  ref_mode_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_meta_predicate_ = false;
  is_pulse_predicate_ = false;
  is_calculated_ = false;
  line_numbers_ = false;
  derivation_type_ = 0;
  locking_policy_ = 0;
  storage_model_ = 0;
  partitioning_ = 0;
  capacity_ = GOOGLE_ULONGLONG(32767);
  role_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_built_in_ = false;
  is_skolem_ = false;
  lifetime_ = 1;
  is_auto_numbered_ = false;
  actual_default_value_ = NULL;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delimiter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_column_names_ = false;
  delim_column_names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_sealed_ = false;
  local_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_synthetic_ = false;
  is_constructor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredicateInfo::~PredicateInfo() {
  SharedDtor();
}

void PredicateInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (qualified_name_ != &::google::protobuf::internal::kEmptyString) {
    delete qualified_name_;
  }
  if (supertype_ != &::google::protobuf::internal::kEmptyString) {
    delete supertype_;
  }
  if (toptype_ != &::google::protobuf::internal::kEmptyString) {
    delete toptype_;
  }
  if (ref_mode_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ref_mode_name_;
  }
  if (role_names_ != &::google::protobuf::internal::kEmptyString) {
    delete role_names_;
  }
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (delimiter_ != &::google::protobuf::internal::kEmptyString) {
    delete delimiter_;
  }
  if (delim_column_names_ != &::google::protobuf::internal::kEmptyString) {
    delete delim_column_names_;
  }
  if (local_name_ != &::google::protobuf::internal::kEmptyString) {
    delete local_name_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (remote_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete remote_ref_;
  }
  if (this != default_instance_) {
    delete actual_default_value_;
  }
}

void PredicateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredicateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredicateInfo_descriptor_;
}

const PredicateInfo& PredicateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

PredicateInfo* PredicateInfo::default_instance_ = NULL;

PredicateInfo* PredicateInfo::New() const {
  return new PredicateInfo;
}

void PredicateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_qualified_name()) {
      if (qualified_name_ != &::google::protobuf::internal::kEmptyString) {
        qualified_name_->clear();
      }
    }
    arity_ = 0u;
    key_arity_ = 0u;
    value_arity_ = 0u;
    is_entity_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_ref_mode_ = false;
    is_one_to_one_ = false;
    is_ordered_ = false;
    has_default_value_ = false;
    is_disjoint_ = false;
    is_subtype_ = false;
    if (has_supertype()) {
      if (supertype_ != &::google::protobuf::internal::kEmptyString) {
        supertype_->clear();
      }
    }
    if (has_toptype()) {
      if (toptype_ != &::google::protobuf::internal::kEmptyString) {
        toptype_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    has_ref_mode_ = false;
    if (has_ref_mode_name()) {
      if (ref_mode_name_ != &::google::protobuf::internal::kEmptyString) {
        ref_mode_name_->clear();
      }
    }
    is_meta_predicate_ = false;
    is_pulse_predicate_ = false;
    is_calculated_ = false;
    line_numbers_ = false;
    derivation_type_ = 0;
    locking_policy_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    storage_model_ = 0;
    partitioning_ = 0;
    capacity_ = GOOGLE_ULONGLONG(32767);
    if (has_role_names()) {
      if (role_names_ != &::google::protobuf::internal::kEmptyString) {
        role_names_->clear();
      }
    }
    is_built_in_ = false;
    is_skolem_ = false;
    lifetime_ = 1;
    is_auto_numbered_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_actual_default_value()) {
      if (actual_default_value_ != NULL) actual_default_value_->::blox::common::protocol::Constant::Clear();
    }
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
    if (has_delimiter()) {
      if (delimiter_ != &::google::protobuf::internal::kEmptyString) {
        delimiter_->clear();
      }
    }
    has_column_names_ = false;
    if (has_delim_column_names()) {
      if (delim_column_names_ != &::google::protobuf::internal::kEmptyString) {
        delim_column_names_->clear();
      }
    }
    is_sealed_ = false;
    if (has_local_name()) {
      if (local_name_ != &::google::protobuf::internal::kEmptyString) {
        local_name_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_remote_ref()) {
      if (remote_ref_ != &::google::protobuf::internal::kEmptyString) {
        remote_ref_->clear();
      }
    }
    is_synthetic_ = false;
    is_constructor_ = false;
  }
  key_argument_.Clear();
  value_argument_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredicateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qualified_name;
        break;
      }
      
      // required string qualified_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qualified_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qualified_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qualified_name().data(), this->qualified_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arity;
        break;
      }
      
      // required uint32 arity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arity_)));
          set_has_arity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key_arity;
        break;
      }
      
      // required uint32 key_arity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_arity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_arity_)));
          set_has_key_arity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_arity;
        break;
      }
      
      // required uint32 value_arity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_arity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_arity_)));
          set_has_value_arity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key_argument;
        break;
      }
      
      // repeated string key_argument = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_key_argument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_argument(0).data(), this->key_argument(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key_argument;
        if (input->ExpectTag(58)) goto parse_value_argument;
        break;
      }
      
      // repeated string value_argument = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_argument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_argument(0).data(), this->value_argument(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value_argument;
        if (input->ExpectTag(64)) goto parse_is_entity;
        break;
      }
      
      // required bool is_entity = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_entity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_entity_)));
          set_has_is_entity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_ref_mode;
        break;
      }
      
      // required bool is_ref_mode = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ref_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ref_mode_)));
          set_has_is_ref_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_one_to_one;
        break;
      }
      
      // required bool is_one_to_one = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_one_to_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_one_to_one_)));
          set_has_is_one_to_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_ordered;
        break;
      }
      
      // required bool is_ordered = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ordered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ordered_)));
          set_has_is_ordered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_has_default_value;
        break;
      }
      
      // required bool has_default_value = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_default_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_default_value_)));
          set_has_has_default_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_disjoint;
        break;
      }
      
      // required bool is_disjoint = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_disjoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disjoint_)));
          set_has_is_disjoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_subtype;
        break;
      }
      
      // required bool is_subtype = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subtype_)));
          set_has_is_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_supertype;
        break;
      }
      
      // optional string supertype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_supertype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_supertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->supertype().data(), this->supertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_has_ref_mode;
        break;
      }
      
      // required bool has_ref_mode = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_ref_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ref_mode_)));
          set_has_has_ref_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ref_mode_name;
        break;
      }
      
      // optional string ref_mode_name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_mode_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_mode_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ref_mode_name().data(), this->ref_mode_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_meta_predicate;
        break;
      }
      
      // required bool is_meta_predicate = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_meta_predicate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_meta_predicate_)));
          set_has_is_meta_predicate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_is_pulse_predicate;
        break;
      }
      
      // required bool is_pulse_predicate = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pulse_predicate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pulse_predicate_)));
          set_has_is_pulse_predicate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_is_calculated;
        break;
      }
      
      // required bool is_calculated = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_calculated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calculated_)));
          set_has_is_calculated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_line_numbers;
        break;
      }
      
      // required bool line_numbers = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &line_numbers_)));
          set_has_line_numbers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_derivation_type;
        break;
      }
      
      // required .blox.common.protocol.DerivationType derivation_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_derivation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::DerivationType_IsValid(value)) {
            set_derivation_type(static_cast< blox::common::protocol::DerivationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_locking_policy;
        break;
      }
      
      // required .blox.common.protocol.LockingPolicy locking_policy = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locking_policy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::LockingPolicy_IsValid(value)) {
            set_locking_policy(static_cast< blox::common::protocol::LockingPolicy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_storage_model;
        break;
      }
      
      // required .blox.common.protocol.StorageModel storage_model = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::StorageModel_IsValid(value)) {
            set_storage_model(static_cast< blox::common::protocol::StorageModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_partitioning;
        break;
      }
      
      // required .blox.common.protocol.Partitioning partitioning = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partitioning:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::Partitioning_IsValid(value)) {
            set_partitioning(static_cast< blox::common::protocol::Partitioning >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_capacity;
        break;
      }
      
      // optional uint64 capacity = 26 [default = 32767];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_role_names;
        break;
      }
      
      // optional string role_names = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_names().data(), this->role_names().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_is_built_in;
        break;
      }
      
      // optional bool is_built_in = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_built_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_built_in_)));
          set_has_is_built_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_is_skolem;
        break;
      }
      
      // required bool is_skolem = 29 [default = false];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_skolem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_skolem_)));
          set_has_is_skolem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_lifetime;
        break;
      }
      
      // required .blox.common.protocol.Lifetime lifetime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifetime:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (blox::common::protocol::Lifetime_IsValid(value)) {
            set_lifetime(static_cast< blox::common::protocol::Lifetime >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_is_auto_numbered;
        break;
      }
      
      // required bool is_auto_numbered = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_numbered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_numbered_)));
          set_has_is_auto_numbered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_actual_default_value;
        break;
      }
      
      // optional .blox.common.protocol.Constant actual_default_value = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actual_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actual_default_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_file_path;
        break;
      }
      
      // optional string file_path = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_delimiter;
        break;
      }
      
      // optional string delimiter = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delimiter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delimiter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delimiter().data(), this->delimiter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_has_column_names;
        break;
      }
      
      // optional bool has_column_names = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_column_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_column_names_)));
          set_has_has_column_names();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_delim_column_names;
        break;
      }
      
      // optional string delim_column_names = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delim_column_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delim_column_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delim_column_names().data(), this->delim_column_names().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_is_sealed;
        break;
      }
      
      // optional bool is_sealed = 37 [default = false];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sealed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sealed_)));
          set_has_is_sealed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_local_name;
        break;
      }
      
      // optional string local_name = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_name().data(), this->local_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_display_name;
        break;
      }
      
      // optional string display_name = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_remote_ref;
        break;
      }
      
      // optional string remote_ref = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remote_ref().data(), this->remote_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_is_synthetic;
        break;
      }
      
      // optional bool is_synthetic = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_synthetic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_synthetic_)));
          set_has_is_synthetic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_toptype;
        break;
      }
      
      // optional string toptype = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toptype().data(), this->toptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_is_constructor;
        break;
      }
      
      // optional bool is_constructor = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_constructor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_constructor_)));
          set_has_is_constructor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredicateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string qualified_name = 2;
  if (has_qualified_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qualified_name().data(), this->qualified_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->qualified_name(), output);
  }
  
  // required uint32 arity = 3;
  if (has_arity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arity(), output);
  }
  
  // required uint32 key_arity = 4;
  if (has_key_arity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_arity(), output);
  }
  
  // required uint32 value_arity = 5;
  if (has_value_arity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value_arity(), output);
  }
  
  // repeated string key_argument = 6;
  for (int i = 0; i < this->key_argument_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->key_argument(i).data(), this->key_argument(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key_argument(i), output);
  }
  
  // repeated string value_argument = 7;
  for (int i = 0; i < this->value_argument_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value_argument(i).data(), this->value_argument(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->value_argument(i), output);
  }
  
  // required bool is_entity = 8 [default = false];
  if (has_is_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_entity(), output);
  }
  
  // required bool is_ref_mode = 9 [default = false];
  if (has_is_ref_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_ref_mode(), output);
  }
  
  // required bool is_one_to_one = 10 [default = false];
  if (has_is_one_to_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_one_to_one(), output);
  }
  
  // required bool is_ordered = 11 [default = false];
  if (has_is_ordered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_ordered(), output);
  }
  
  // required bool has_default_value = 12 [default = false];
  if (has_has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_default_value(), output);
  }
  
  // required bool is_disjoint = 13 [default = false];
  if (has_is_disjoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_disjoint(), output);
  }
  
  // required bool is_subtype = 14 [default = false];
  if (has_is_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_subtype(), output);
  }
  
  // optional string supertype = 15;
  if (has_supertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->supertype().data(), this->supertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->supertype(), output);
  }
  
  // required bool has_ref_mode = 16 [default = false];
  if (has_has_ref_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->has_ref_mode(), output);
  }
  
  // optional string ref_mode_name = 17;
  if (has_ref_mode_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref_mode_name().data(), this->ref_mode_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->ref_mode_name(), output);
  }
  
  // required bool is_meta_predicate = 18 [default = false];
  if (has_is_meta_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_meta_predicate(), output);
  }
  
  // required bool is_pulse_predicate = 19 [default = false];
  if (has_is_pulse_predicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_pulse_predicate(), output);
  }
  
  // required bool is_calculated = 20 [default = false];
  if (has_is_calculated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_calculated(), output);
  }
  
  // required bool line_numbers = 21 [default = false];
  if (has_line_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->line_numbers(), output);
  }
  
  // required .blox.common.protocol.DerivationType derivation_type = 22;
  if (has_derivation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->derivation_type(), output);
  }
  
  // required .blox.common.protocol.LockingPolicy locking_policy = 23;
  if (has_locking_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->locking_policy(), output);
  }
  
  // required .blox.common.protocol.StorageModel storage_model = 24;
  if (has_storage_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->storage_model(), output);
  }
  
  // required .blox.common.protocol.Partitioning partitioning = 25;
  if (has_partitioning()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->partitioning(), output);
  }
  
  // optional uint64 capacity = 26 [default = 32767];
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->capacity(), output);
  }
  
  // optional string role_names = 27;
  if (has_role_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_names().data(), this->role_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->role_names(), output);
  }
  
  // optional bool is_built_in = 28 [default = false];
  if (has_is_built_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_built_in(), output);
  }
  
  // required bool is_skolem = 29 [default = false];
  if (has_is_skolem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_skolem(), output);
  }
  
  // required .blox.common.protocol.Lifetime lifetime = 30;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->lifetime(), output);
  }
  
  // required bool is_auto_numbered = 31;
  if (has_is_auto_numbered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_auto_numbered(), output);
  }
  
  // optional .blox.common.protocol.Constant actual_default_value = 32;
  if (has_actual_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->actual_default_value(), output);
  }
  
  // optional string file_path = 33;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->file_path(), output);
  }
  
  // optional string delimiter = 34;
  if (has_delimiter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delimiter().data(), this->delimiter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->delimiter(), output);
  }
  
  // optional bool has_column_names = 35;
  if (has_has_column_names()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->has_column_names(), output);
  }
  
  // optional string delim_column_names = 36;
  if (has_delim_column_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delim_column_names().data(), this->delim_column_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->delim_column_names(), output);
  }
  
  // optional bool is_sealed = 37 [default = false];
  if (has_is_sealed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_sealed(), output);
  }
  
  // optional string local_name = 38;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->local_name(), output);
  }
  
  // optional string display_name = 39;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->display_name(), output);
  }
  
  // optional string remote_ref = 40;
  if (has_remote_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_ref().data(), this->remote_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->remote_ref(), output);
  }
  
  // optional bool is_synthetic = 41;
  if (has_is_synthetic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->is_synthetic(), output);
  }
  
  // optional string toptype = 42;
  if (has_toptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toptype().data(), this->toptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->toptype(), output);
  }
  
  // optional bool is_constructor = 43;
  if (has_is_constructor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->is_constructor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredicateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string qualified_name = 2;
  if (has_qualified_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qualified_name().data(), this->qualified_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qualified_name(), target);
  }
  
  // required uint32 arity = 3;
  if (has_arity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arity(), target);
  }
  
  // required uint32 key_arity = 4;
  if (has_key_arity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_arity(), target);
  }
  
  // required uint32 value_arity = 5;
  if (has_value_arity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value_arity(), target);
  }
  
  // repeated string key_argument = 6;
  for (int i = 0; i < this->key_argument_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_argument(i).data(), this->key_argument(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->key_argument(i), target);
  }
  
  // repeated string value_argument = 7;
  for (int i = 0; i < this->value_argument_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_argument(i).data(), this->value_argument(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->value_argument(i), target);
  }
  
  // required bool is_entity = 8 [default = false];
  if (has_is_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_entity(), target);
  }
  
  // required bool is_ref_mode = 9 [default = false];
  if (has_is_ref_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_ref_mode(), target);
  }
  
  // required bool is_one_to_one = 10 [default = false];
  if (has_is_one_to_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_one_to_one(), target);
  }
  
  // required bool is_ordered = 11 [default = false];
  if (has_is_ordered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_ordered(), target);
  }
  
  // required bool has_default_value = 12 [default = false];
  if (has_has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_default_value(), target);
  }
  
  // required bool is_disjoint = 13 [default = false];
  if (has_is_disjoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_disjoint(), target);
  }
  
  // required bool is_subtype = 14 [default = false];
  if (has_is_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_subtype(), target);
  }
  
  // optional string supertype = 15;
  if (has_supertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->supertype().data(), this->supertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->supertype(), target);
  }
  
  // required bool has_ref_mode = 16 [default = false];
  if (has_has_ref_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->has_ref_mode(), target);
  }
  
  // optional string ref_mode_name = 17;
  if (has_ref_mode_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ref_mode_name().data(), this->ref_mode_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ref_mode_name(), target);
  }
  
  // required bool is_meta_predicate = 18 [default = false];
  if (has_is_meta_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_meta_predicate(), target);
  }
  
  // required bool is_pulse_predicate = 19 [default = false];
  if (has_is_pulse_predicate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_pulse_predicate(), target);
  }
  
  // required bool is_calculated = 20 [default = false];
  if (has_is_calculated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_calculated(), target);
  }
  
  // required bool line_numbers = 21 [default = false];
  if (has_line_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->line_numbers(), target);
  }
  
  // required .blox.common.protocol.DerivationType derivation_type = 22;
  if (has_derivation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->derivation_type(), target);
  }
  
  // required .blox.common.protocol.LockingPolicy locking_policy = 23;
  if (has_locking_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->locking_policy(), target);
  }
  
  // required .blox.common.protocol.StorageModel storage_model = 24;
  if (has_storage_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->storage_model(), target);
  }
  
  // required .blox.common.protocol.Partitioning partitioning = 25;
  if (has_partitioning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->partitioning(), target);
  }
  
  // optional uint64 capacity = 26 [default = 32767];
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->capacity(), target);
  }
  
  // optional string role_names = 27;
  if (has_role_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_names().data(), this->role_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->role_names(), target);
  }
  
  // optional bool is_built_in = 28 [default = false];
  if (has_is_built_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_built_in(), target);
  }
  
  // required bool is_skolem = 29 [default = false];
  if (has_is_skolem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_skolem(), target);
  }
  
  // required .blox.common.protocol.Lifetime lifetime = 30;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->lifetime(), target);
  }
  
  // required bool is_auto_numbered = 31;
  if (has_is_auto_numbered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_auto_numbered(), target);
  }
  
  // optional .blox.common.protocol.Constant actual_default_value = 32;
  if (has_actual_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->actual_default_value(), target);
  }
  
  // optional string file_path = 33;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->file_path(), target);
  }
  
  // optional string delimiter = 34;
  if (has_delimiter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delimiter().data(), this->delimiter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->delimiter(), target);
  }
  
  // optional bool has_column_names = 35;
  if (has_has_column_names()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->has_column_names(), target);
  }
  
  // optional string delim_column_names = 36;
  if (has_delim_column_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delim_column_names().data(), this->delim_column_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->delim_column_names(), target);
  }
  
  // optional bool is_sealed = 37 [default = false];
  if (has_is_sealed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_sealed(), target);
  }
  
  // optional string local_name = 38;
  if (has_local_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_name().data(), this->local_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->local_name(), target);
  }
  
  // optional string display_name = 39;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->display_name(), target);
  }
  
  // optional string remote_ref = 40;
  if (has_remote_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_ref().data(), this->remote_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->remote_ref(), target);
  }
  
  // optional bool is_synthetic = 41;
  if (has_is_synthetic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->is_synthetic(), target);
  }
  
  // optional string toptype = 42;
  if (has_toptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toptype().data(), this->toptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->toptype(), target);
  }
  
  // optional bool is_constructor = 43;
  if (has_is_constructor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->is_constructor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredicateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string qualified_name = 2;
    if (has_qualified_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qualified_name());
    }
    
    // required uint32 arity = 3;
    if (has_arity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arity());
    }
    
    // required uint32 key_arity = 4;
    if (has_key_arity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_arity());
    }
    
    // required uint32 value_arity = 5;
    if (has_value_arity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_arity());
    }
    
    // required bool is_entity = 8 [default = false];
    if (has_is_entity()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_ref_mode = 9 [default = false];
    if (has_is_ref_mode()) {
      total_size += 1 + 1;
    }
    
    // required bool is_one_to_one = 10 [default = false];
    if (has_is_one_to_one()) {
      total_size += 1 + 1;
    }
    
    // required bool is_ordered = 11 [default = false];
    if (has_is_ordered()) {
      total_size += 1 + 1;
    }
    
    // required bool has_default_value = 12 [default = false];
    if (has_has_default_value()) {
      total_size += 1 + 1;
    }
    
    // required bool is_disjoint = 13 [default = false];
    if (has_is_disjoint()) {
      total_size += 1 + 1;
    }
    
    // required bool is_subtype = 14 [default = false];
    if (has_is_subtype()) {
      total_size += 1 + 1;
    }
    
    // optional string supertype = 15;
    if (has_supertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->supertype());
    }
    
    // optional string toptype = 42;
    if (has_toptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toptype());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool has_ref_mode = 16 [default = false];
    if (has_has_ref_mode()) {
      total_size += 2 + 1;
    }
    
    // optional string ref_mode_name = 17;
    if (has_ref_mode_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_mode_name());
    }
    
    // required bool is_meta_predicate = 18 [default = false];
    if (has_is_meta_predicate()) {
      total_size += 2 + 1;
    }
    
    // required bool is_pulse_predicate = 19 [default = false];
    if (has_is_pulse_predicate()) {
      total_size += 2 + 1;
    }
    
    // required bool is_calculated = 20 [default = false];
    if (has_is_calculated()) {
      total_size += 2 + 1;
    }
    
    // required bool line_numbers = 21 [default = false];
    if (has_line_numbers()) {
      total_size += 2 + 1;
    }
    
    // required .blox.common.protocol.DerivationType derivation_type = 22;
    if (has_derivation_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->derivation_type());
    }
    
    // required .blox.common.protocol.LockingPolicy locking_policy = 23;
    if (has_locking_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->locking_policy());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .blox.common.protocol.StorageModel storage_model = 24;
    if (has_storage_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_model());
    }
    
    // required .blox.common.protocol.Partitioning partitioning = 25;
    if (has_partitioning()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partitioning());
    }
    
    // optional uint64 capacity = 26 [default = 32767];
    if (has_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capacity());
    }
    
    // optional string role_names = 27;
    if (has_role_names()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_names());
    }
    
    // optional bool is_built_in = 28 [default = false];
    if (has_is_built_in()) {
      total_size += 2 + 1;
    }
    
    // required bool is_skolem = 29 [default = false];
    if (has_is_skolem()) {
      total_size += 2 + 1;
    }
    
    // required .blox.common.protocol.Lifetime lifetime = 30;
    if (has_lifetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lifetime());
    }
    
    // required bool is_auto_numbered = 31;
    if (has_is_auto_numbered()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .blox.common.protocol.Constant actual_default_value = 32;
    if (has_actual_default_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actual_default_value());
    }
    
    // optional string file_path = 33;
    if (has_file_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }
    
    // optional string delimiter = 34;
    if (has_delimiter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delimiter());
    }
    
    // optional bool has_column_names = 35;
    if (has_has_column_names()) {
      total_size += 2 + 1;
    }
    
    // optional string delim_column_names = 36;
    if (has_delim_column_names()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delim_column_names());
    }
    
    // optional bool is_sealed = 37 [default = false];
    if (has_is_sealed()) {
      total_size += 2 + 1;
    }
    
    // optional string local_name = 38;
    if (has_local_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_name());
    }
    
    // optional string display_name = 39;
    if (has_display_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string remote_ref = 40;
    if (has_remote_ref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_ref());
    }
    
    // optional bool is_synthetic = 41;
    if (has_is_synthetic()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_constructor = 43;
    if (has_is_constructor()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string key_argument = 6;
  total_size += 1 * this->key_argument_size();
  for (int i = 0; i < this->key_argument_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->key_argument(i));
  }
  
  // repeated string value_argument = 7;
  total_size += 1 * this->value_argument_size();
  for (int i = 0; i < this->value_argument_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_argument(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredicateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredicateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredicateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredicateInfo::MergeFrom(const PredicateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_argument_.MergeFrom(from.key_argument_);
  value_argument_.MergeFrom(from.value_argument_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_qualified_name()) {
      set_qualified_name(from.qualified_name());
    }
    if (from.has_arity()) {
      set_arity(from.arity());
    }
    if (from.has_key_arity()) {
      set_key_arity(from.key_arity());
    }
    if (from.has_value_arity()) {
      set_value_arity(from.value_arity());
    }
    if (from.has_is_entity()) {
      set_is_entity(from.is_entity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_ref_mode()) {
      set_is_ref_mode(from.is_ref_mode());
    }
    if (from.has_is_one_to_one()) {
      set_is_one_to_one(from.is_one_to_one());
    }
    if (from.has_is_ordered()) {
      set_is_ordered(from.is_ordered());
    }
    if (from.has_has_default_value()) {
      set_has_default_value(from.has_default_value());
    }
    if (from.has_is_disjoint()) {
      set_is_disjoint(from.is_disjoint());
    }
    if (from.has_is_subtype()) {
      set_is_subtype(from.is_subtype());
    }
    if (from.has_supertype()) {
      set_supertype(from.supertype());
    }
    if (from.has_toptype()) {
      set_toptype(from.toptype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_has_ref_mode()) {
      set_has_ref_mode(from.has_ref_mode());
    }
    if (from.has_ref_mode_name()) {
      set_ref_mode_name(from.ref_mode_name());
    }
    if (from.has_is_meta_predicate()) {
      set_is_meta_predicate(from.is_meta_predicate());
    }
    if (from.has_is_pulse_predicate()) {
      set_is_pulse_predicate(from.is_pulse_predicate());
    }
    if (from.has_is_calculated()) {
      set_is_calculated(from.is_calculated());
    }
    if (from.has_line_numbers()) {
      set_line_numbers(from.line_numbers());
    }
    if (from.has_derivation_type()) {
      set_derivation_type(from.derivation_type());
    }
    if (from.has_locking_policy()) {
      set_locking_policy(from.locking_policy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_storage_model()) {
      set_storage_model(from.storage_model());
    }
    if (from.has_partitioning()) {
      set_partitioning(from.partitioning());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_role_names()) {
      set_role_names(from.role_names());
    }
    if (from.has_is_built_in()) {
      set_is_built_in(from.is_built_in());
    }
    if (from.has_is_skolem()) {
      set_is_skolem(from.is_skolem());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_is_auto_numbered()) {
      set_is_auto_numbered(from.is_auto_numbered());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_actual_default_value()) {
      mutable_actual_default_value()->::blox::common::protocol::Constant::MergeFrom(from.actual_default_value());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
    if (from.has_delimiter()) {
      set_delimiter(from.delimiter());
    }
    if (from.has_has_column_names()) {
      set_has_column_names(from.has_column_names());
    }
    if (from.has_delim_column_names()) {
      set_delim_column_names(from.delim_column_names());
    }
    if (from.has_is_sealed()) {
      set_is_sealed(from.is_sealed());
    }
    if (from.has_local_name()) {
      set_local_name(from.local_name());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_remote_ref()) {
      set_remote_ref(from.remote_ref());
    }
    if (from.has_is_synthetic()) {
      set_is_synthetic(from.is_synthetic());
    }
    if (from.has_is_constructor()) {
      set_is_constructor(from.is_constructor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredicateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredicateInfo::CopyFrom(const PredicateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xe3fd3f9f) != 0xe3fd3f9f) return false;
  
  if (has_actual_default_value()) {
    if (!this->actual_default_value().IsInitialized()) return false;
  }
  return true;
}

void PredicateInfo::Swap(PredicateInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(qualified_name_, other->qualified_name_);
    std::swap(arity_, other->arity_);
    std::swap(key_arity_, other->key_arity_);
    std::swap(value_arity_, other->value_arity_);
    key_argument_.Swap(&other->key_argument_);
    value_argument_.Swap(&other->value_argument_);
    std::swap(is_entity_, other->is_entity_);
    std::swap(is_ref_mode_, other->is_ref_mode_);
    std::swap(is_one_to_one_, other->is_one_to_one_);
    std::swap(is_ordered_, other->is_ordered_);
    std::swap(has_default_value_, other->has_default_value_);
    std::swap(is_disjoint_, other->is_disjoint_);
    std::swap(is_subtype_, other->is_subtype_);
    std::swap(supertype_, other->supertype_);
    std::swap(toptype_, other->toptype_);
    std::swap(has_ref_mode_, other->has_ref_mode_);
    std::swap(ref_mode_name_, other->ref_mode_name_);
    std::swap(is_meta_predicate_, other->is_meta_predicate_);
    std::swap(is_pulse_predicate_, other->is_pulse_predicate_);
    std::swap(is_calculated_, other->is_calculated_);
    std::swap(line_numbers_, other->line_numbers_);
    std::swap(derivation_type_, other->derivation_type_);
    std::swap(locking_policy_, other->locking_policy_);
    std::swap(storage_model_, other->storage_model_);
    std::swap(partitioning_, other->partitioning_);
    std::swap(capacity_, other->capacity_);
    std::swap(role_names_, other->role_names_);
    std::swap(is_built_in_, other->is_built_in_);
    std::swap(is_skolem_, other->is_skolem_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(is_auto_numbered_, other->is_auto_numbered_);
    std::swap(actual_default_value_, other->actual_default_value_);
    std::swap(file_path_, other->file_path_);
    std::swap(delimiter_, other->delimiter_);
    std::swap(has_column_names_, other->has_column_names_);
    std::swap(delim_column_names_, other->delim_column_names_);
    std::swap(is_sealed_, other->is_sealed_);
    std::swap(local_name_, other->local_name_);
    std::swap(display_name_, other->display_name_);
    std::swap(remote_ref_, other->remote_ref_);
    std::swap(is_synthetic_, other->is_synthetic_);
    std::swap(is_constructor_, other->is_constructor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredicateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredicateInfo_descriptor_;
  metadata.reflection = PredicateInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Constant_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constant_Kind_descriptor_;
}
bool Constant_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Constant_Kind Constant::BOOL;
const Constant_Kind Constant::INT;
const Constant_Kind Constant::FLOAT;
const Constant_Kind Constant::STRING;
const Constant_Kind Constant::DATETIME;
const Constant_Kind Constant::UINT;
const Constant_Kind Constant::Kind_MIN;
const Constant_Kind Constant::Kind_MAX;
const int Constant::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Constant::kKindFieldNumber;
const int Constant::kBoolConstantFieldNumber;
const int Constant::kIntConstantFieldNumber;
const int Constant::kFloatConstantFieldNumber;
const int Constant::kStringConstantFieldNumber;
const int Constant::kDateTimeConstantFieldNumber;
const int Constant::kUintConstantFieldNumber;
#endif  // !_MSC_VER

Constant::Constant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Constant::InitAsDefaultInstance() {
  bool_constant_ = const_cast< ::blox::common::protocol::BoolConstant*>(&::blox::common::protocol::BoolConstant::default_instance());
  int_constant_ = const_cast< ::blox::common::protocol::IntConstant*>(&::blox::common::protocol::IntConstant::default_instance());
  float_constant_ = const_cast< ::blox::common::protocol::FloatConstant*>(&::blox::common::protocol::FloatConstant::default_instance());
  string_constant_ = const_cast< ::blox::common::protocol::StringConstant*>(&::blox::common::protocol::StringConstant::default_instance());
  date_time_constant_ = const_cast< ::blox::common::protocol::DateTimeConstant*>(&::blox::common::protocol::DateTimeConstant::default_instance());
  uint_constant_ = const_cast< ::blox::common::protocol::UnsignedIntConstant*>(&::blox::common::protocol::UnsignedIntConstant::default_instance());
}

Constant::Constant(const Constant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Constant::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  bool_constant_ = NULL;
  int_constant_ = NULL;
  float_constant_ = NULL;
  string_constant_ = NULL;
  date_time_constant_ = NULL;
  uint_constant_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Constant::~Constant() {
  SharedDtor();
}

void Constant::SharedDtor() {
  if (this != default_instance_) {
    delete bool_constant_;
    delete int_constant_;
    delete float_constant_;
    delete string_constant_;
    delete date_time_constant_;
    delete uint_constant_;
  }
}

void Constant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Constant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constant_descriptor_;
}

const Constant& Constant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

Constant* Constant::default_instance_ = NULL;

Constant* Constant::New() const {
  return new Constant;
}

void Constant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    if (has_bool_constant()) {
      if (bool_constant_ != NULL) bool_constant_->::blox::common::protocol::BoolConstant::Clear();
    }
    if (has_int_constant()) {
      if (int_constant_ != NULL) int_constant_->::blox::common::protocol::IntConstant::Clear();
    }
    if (has_float_constant()) {
      if (float_constant_ != NULL) float_constant_->::blox::common::protocol::FloatConstant::Clear();
    }
    if (has_string_constant()) {
      if (string_constant_ != NULL) string_constant_->::blox::common::protocol::StringConstant::Clear();
    }
    if (has_date_time_constant()) {
      if (date_time_constant_ != NULL) date_time_constant_->::blox::common::protocol::DateTimeConstant::Clear();
    }
    if (has_uint_constant()) {
      if (uint_constant_ != NULL) uint_constant_->::blox::common::protocol::UnsignedIntConstant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Constant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .blox.common.protocol.Constant.Kind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::blox::common::protocol::Constant_Kind_IsValid(value)) {
            set_kind(static_cast< ::blox::common::protocol::Constant_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bool_constant;
        break;
      }
      
      // optional .blox.common.protocol.BoolConstant bool_constant = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bool_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bool_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_int_constant;
        break;
      }
      
      // optional .blox.common.protocol.IntConstant int_constant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_float_constant;
        break;
      }
      
      // optional .blox.common.protocol.FloatConstant float_constant = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_float_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_constant;
        break;
      }
      
      // optional .blox.common.protocol.StringConstant string_constant = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_date_time_constant;
        break;
      }
      
      // optional .blox.common.protocol.DateTimeConstant date_time_constant = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_time_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uint_constant;
        break;
      }
      
      // optional .blox.common.protocol.UnsignedIntConstant uint_constant = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uint_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uint_constant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Constant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .blox.common.protocol.Constant.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }
  
  // optional .blox.common.protocol.BoolConstant bool_constant = 2;
  if (has_bool_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bool_constant(), output);
  }
  
  // optional .blox.common.protocol.IntConstant int_constant = 3;
  if (has_int_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->int_constant(), output);
  }
  
  // optional .blox.common.protocol.FloatConstant float_constant = 4;
  if (has_float_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->float_constant(), output);
  }
  
  // optional .blox.common.protocol.StringConstant string_constant = 5;
  if (has_string_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->string_constant(), output);
  }
  
  // optional .blox.common.protocol.DateTimeConstant date_time_constant = 6;
  if (has_date_time_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->date_time_constant(), output);
  }
  
  // optional .blox.common.protocol.UnsignedIntConstant uint_constant = 7;
  if (has_uint_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->uint_constant(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Constant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .blox.common.protocol.Constant.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }
  
  // optional .blox.common.protocol.BoolConstant bool_constant = 2;
  if (has_bool_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bool_constant(), target);
  }
  
  // optional .blox.common.protocol.IntConstant int_constant = 3;
  if (has_int_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->int_constant(), target);
  }
  
  // optional .blox.common.protocol.FloatConstant float_constant = 4;
  if (has_float_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->float_constant(), target);
  }
  
  // optional .blox.common.protocol.StringConstant string_constant = 5;
  if (has_string_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->string_constant(), target);
  }
  
  // optional .blox.common.protocol.DateTimeConstant date_time_constant = 6;
  if (has_date_time_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->date_time_constant(), target);
  }
  
  // optional .blox.common.protocol.UnsignedIntConstant uint_constant = 7;
  if (has_uint_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->uint_constant(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Constant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .blox.common.protocol.Constant.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }
    
    // optional .blox.common.protocol.BoolConstant bool_constant = 2;
    if (has_bool_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bool_constant());
    }
    
    // optional .blox.common.protocol.IntConstant int_constant = 3;
    if (has_int_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_constant());
    }
    
    // optional .blox.common.protocol.FloatConstant float_constant = 4;
    if (has_float_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_constant());
    }
    
    // optional .blox.common.protocol.StringConstant string_constant = 5;
    if (has_string_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_constant());
    }
    
    // optional .blox.common.protocol.DateTimeConstant date_time_constant = 6;
    if (has_date_time_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time_constant());
    }
    
    // optional .blox.common.protocol.UnsignedIntConstant uint_constant = 7;
    if (has_uint_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uint_constant());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Constant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Constant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Constant::MergeFrom(const Constant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_bool_constant()) {
      mutable_bool_constant()->::blox::common::protocol::BoolConstant::MergeFrom(from.bool_constant());
    }
    if (from.has_int_constant()) {
      mutable_int_constant()->::blox::common::protocol::IntConstant::MergeFrom(from.int_constant());
    }
    if (from.has_float_constant()) {
      mutable_float_constant()->::blox::common::protocol::FloatConstant::MergeFrom(from.float_constant());
    }
    if (from.has_string_constant()) {
      mutable_string_constant()->::blox::common::protocol::StringConstant::MergeFrom(from.string_constant());
    }
    if (from.has_date_time_constant()) {
      mutable_date_time_constant()->::blox::common::protocol::DateTimeConstant::MergeFrom(from.date_time_constant());
    }
    if (from.has_uint_constant()) {
      mutable_uint_constant()->::blox::common::protocol::UnsignedIntConstant::MergeFrom(from.uint_constant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Constant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constant::CopyFrom(const Constant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_bool_constant()) {
    if (!this->bool_constant().IsInitialized()) return false;
  }
  if (has_int_constant()) {
    if (!this->int_constant().IsInitialized()) return false;
  }
  if (has_float_constant()) {
    if (!this->float_constant().IsInitialized()) return false;
  }
  if (has_string_constant()) {
    if (!this->string_constant().IsInitialized()) return false;
  }
  if (has_date_time_constant()) {
    if (!this->date_time_constant().IsInitialized()) return false;
  }
  if (has_uint_constant()) {
    if (!this->uint_constant().IsInitialized()) return false;
  }
  return true;
}

void Constant::Swap(Constant* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(bool_constant_, other->bool_constant_);
    std::swap(int_constant_, other->int_constant_);
    std::swap(float_constant_, other->float_constant_);
    std::swap(string_constant_, other->string_constant_);
    std::swap(date_time_constant_, other->date_time_constant_);
    std::swap(uint_constant_, other->uint_constant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Constant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Constant_descriptor_;
  metadata.reflection = Constant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoolConstant::kValueFieldNumber;
const int BoolConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

BoolConstant::BoolConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoolConstant::InitAsDefaultInstance() {
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

BoolConstant::BoolConstant(const BoolConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoolConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = false;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoolConstant::~BoolConstant() {
  SharedDtor();
}

void BoolConstant::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void BoolConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolConstant_descriptor_;
}

const BoolConstant& BoolConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

BoolConstant* BoolConstant::default_instance_ = NULL;

BoolConstant* BoolConstant::New() const {
  return new BoolConstant;
}

void BoolConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = false;
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoolConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoolConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoolConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoolConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool value = 1;
    if (has_value()) {
      total_size += 1 + 1;
    }
    
    // optional .blox.common.protocol.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoolConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoolConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoolConstant::MergeFrom(const BoolConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoolConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolConstant::CopyFrom(const BoolConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolConstant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void BoolConstant::Swap(BoolConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoolConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolConstant_descriptor_;
  metadata.reflection = BoolConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntConstant::kValueFieldNumber;
const int IntConstant::kTypeFieldNumber;
const int IntConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

IntConstant::IntConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntConstant::InitAsDefaultInstance() {
  type_ = const_cast< ::blox::common::protocol::Type*>(&::blox::common::protocol::Type::default_instance());
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

IntConstant::IntConstant(const IntConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  type_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntConstant::~IntConstant() {
  SharedDtor();
}

void IntConstant::SharedDtor() {
  if (this != default_instance_) {
    delete type_;
    delete position_;
  }
}

void IntConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntConstant_descriptor_;
}

const IntConstant& IntConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

IntConstant* IntConstant::default_instance_ = NULL;

IntConstant* IntConstant::New() const {
  return new IntConstant;
}

void IntConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != NULL) type_->::blox::common::protocol::Type::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .blox.common.protocol.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // required .blox.common.protocol.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .blox.common.protocol.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntConstant::MergeFrom(const IntConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      mutable_type()->::blox::common::protocol::Type::MergeFrom(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntConstant::CopyFrom(const IntConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntConstant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void IntConstant::Swap(IntConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntConstant_descriptor_;
  metadata.reflection = IntConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsignedIntConstant::kValueFieldNumber;
const int UnsignedIntConstant::kTypeFieldNumber;
const int UnsignedIntConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

UnsignedIntConstant::UnsignedIntConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsignedIntConstant::InitAsDefaultInstance() {
  type_ = const_cast< ::blox::common::protocol::Type*>(&::blox::common::protocol::Type::default_instance());
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

UnsignedIntConstant::UnsignedIntConstant(const UnsignedIntConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsignedIntConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  type_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsignedIntConstant::~UnsignedIntConstant() {
  SharedDtor();
}

void UnsignedIntConstant::SharedDtor() {
  if (this != default_instance_) {
    delete type_;
    delete position_;
  }
}

void UnsignedIntConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsignedIntConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsignedIntConstant_descriptor_;
}

const UnsignedIntConstant& UnsignedIntConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

UnsignedIntConstant* UnsignedIntConstant::default_instance_ = NULL;

UnsignedIntConstant* UnsignedIntConstant::New() const {
  return new UnsignedIntConstant;
}

void UnsignedIntConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != NULL) type_->::blox::common::protocol::Type::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsignedIntConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .blox.common.protocol.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsignedIntConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsignedIntConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsignedIntConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // required .blox.common.protocol.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .blox.common.protocol.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsignedIntConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsignedIntConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsignedIntConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsignedIntConstant::MergeFrom(const UnsignedIntConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      mutable_type()->::blox::common::protocol::Type::MergeFrom(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsignedIntConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsignedIntConstant::CopyFrom(const UnsignedIntConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsignedIntConstant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void UnsignedIntConstant::Swap(UnsignedIntConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsignedIntConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsignedIntConstant_descriptor_;
  metadata.reflection = UnsignedIntConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatConstant::kValueFieldNumber;
const int FloatConstant::kTypeFieldNumber;
const int FloatConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

FloatConstant::FloatConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatConstant::InitAsDefaultInstance() {
  type_ = const_cast< ::blox::common::protocol::Type*>(&::blox::common::protocol::Type::default_instance());
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

FloatConstant::FloatConstant(const FloatConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatConstant::~FloatConstant() {
  SharedDtor();
}

void FloatConstant::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete type_;
    delete position_;
  }
}

void FloatConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatConstant_descriptor_;
}

const FloatConstant& FloatConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

FloatConstant* FloatConstant::default_instance_ = NULL;

FloatConstant* FloatConstant::New() const {
  return new FloatConstant;
}

void FloatConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_type()) {
      if (type_ != NULL) type_->::blox::common::protocol::Type::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .blox.common.protocol.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  // required .blox.common.protocol.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .blox.common.protocol.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // required .blox.common.protocol.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .blox.common.protocol.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatConstant::MergeFrom(const FloatConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      mutable_type()->::blox::common::protocol::Type::MergeFrom(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatConstant::CopyFrom(const FloatConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatConstant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void FloatConstant::Swap(FloatConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatConstant_descriptor_;
  metadata.reflection = FloatConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringConstant::kValueFieldNumber;
const int StringConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

StringConstant::StringConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringConstant::InitAsDefaultInstance() {
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

StringConstant::StringConstant(const StringConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringConstant::~StringConstant() {
  SharedDtor();
}

void StringConstant::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void StringConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringConstant_descriptor_;
}

const StringConstant& StringConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

StringConstant* StringConstant::default_instance_ = NULL;

StringConstant* StringConstant::New() const {
  return new StringConstant;
}

void StringConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional .blox.common.protocol.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringConstant::MergeFrom(const StringConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringConstant::CopyFrom(const StringConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringConstant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void StringConstant::Swap(StringConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringConstant_descriptor_;
  metadata.reflection = StringConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DateTimeConstant::kValueFieldNumber;
const int DateTimeConstant::kPositionFieldNumber;
#endif  // !_MSC_VER

DateTimeConstant::DateTimeConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DateTimeConstant::InitAsDefaultInstance() {
  position_ = const_cast< ::blox::common::protocol::Position*>(&::blox::common::protocol::Position::default_instance());
}

DateTimeConstant::DateTimeConstant(const DateTimeConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DateTimeConstant::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTimeConstant::~DateTimeConstant() {
  SharedDtor();
}

void DateTimeConstant::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void DateTimeConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateTimeConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTimeConstant_descriptor_;
}

const DateTimeConstant& DateTimeConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

DateTimeConstant* DateTimeConstant::default_instance_ = NULL;

DateTimeConstant* DateTimeConstant::New() const {
  return new DateTimeConstant;
}

void DateTimeConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    if (has_position()) {
      if (position_ != NULL) position_->::blox::common::protocol::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateTimeConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .blox.common.protocol.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DateTimeConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DateTimeConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  // optional .blox.common.protocol.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DateTimeConstant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // optional .blox.common.protocol.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTimeConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateTimeConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateTimeConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateTimeConstant::MergeFrom(const DateTimeConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_position()) {
      mutable_position()->::blox::common::protocol::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateTimeConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeConstant::CopyFrom(const DateTimeConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeConstant::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void DateTimeConstant::Swap(DateTimeConstant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateTimeConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateTimeConstant_descriptor_;
  metadata.reflection = DateTimeConstant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Type_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_Kind_descriptor_;
}
bool Type_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Type_Kind Type::PRIMITIVE;
const Type_Kind Type::UNARY;
const Type_Kind Type::Kind_MIN;
const Type_Kind Type::Kind_MAX;
const int Type::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Type::kKindFieldNumber;
const int Type::kPrimitiveFieldNumber;
const int Type::kUnaryFieldNumber;
#endif  // !_MSC_VER

Type::Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Type::InitAsDefaultInstance() {
  primitive_ = const_cast< ::blox::common::protocol::PrimitiveType*>(&::blox::common::protocol::PrimitiveType::default_instance());
  unary_ = const_cast< ::blox::common::protocol::UnaryPredicateType*>(&::blox::common::protocol::UnaryPredicateType::default_instance());
}

Type::Type(const Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Type::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  primitive_ = NULL;
  unary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Type::~Type() {
  SharedDtor();
}

void Type::SharedDtor() {
  if (this != default_instance_) {
    delete primitive_;
    delete unary_;
  }
}

void Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}

const Type& Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

Type* Type::default_instance_ = NULL;

Type* Type::New() const {
  return new Type;
}

void Type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    if (has_primitive()) {
      if (primitive_ != NULL) primitive_->::blox::common::protocol::PrimitiveType::Clear();
    }
    if (has_unary()) {
      if (unary_ != NULL) unary_->::blox::common::protocol::UnaryPredicateType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .blox.common.protocol.Type.Kind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::blox::common::protocol::Type_Kind_IsValid(value)) {
            set_kind(static_cast< ::blox::common::protocol::Type_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_primitive;
        break;
      }
      
      // optional .blox.common.protocol.PrimitiveType primitive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primitive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primitive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unary;
        break;
      }
      
      // optional .blox.common.protocol.UnaryPredicateType unary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .blox.common.protocol.Type.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }
  
  // optional .blox.common.protocol.PrimitiveType primitive = 2;
  if (has_primitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->primitive(), output);
  }
  
  // optional .blox.common.protocol.UnaryPredicateType unary = 3;
  if (has_unary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .blox.common.protocol.Type.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }
  
  // optional .blox.common.protocol.PrimitiveType primitive = 2;
  if (has_primitive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->primitive(), target);
  }
  
  // optional .blox.common.protocol.UnaryPredicateType unary = 3;
  if (has_unary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .blox.common.protocol.Type.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }
    
    // optional .blox.common.protocol.PrimitiveType primitive = 2;
    if (has_primitive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primitive());
    }
    
    // optional .blox.common.protocol.UnaryPredicateType unary = 3;
    if (has_unary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_primitive()) {
      mutable_primitive()->::blox::common::protocol::PrimitiveType::MergeFrom(from.primitive());
    }
    if (from.has_unary()) {
      mutable_unary()->::blox::common::protocol::UnaryPredicateType::MergeFrom(from.unary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_primitive()) {
    if (!this->primitive().IsInitialized()) return false;
  }
  if (has_unary()) {
    if (!this->unary().IsInitialized()) return false;
  }
  return true;
}

void Type::Swap(Type* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(primitive_, other->primitive_);
    std::swap(unary_, other->unary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Type_descriptor_;
  metadata.reflection = Type_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PrimitiveType_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveType_Kind_descriptor_;
}
bool PrimitiveType_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PrimitiveType_Kind PrimitiveType::BOOL;
const PrimitiveType_Kind PrimitiveType::COLOR;
const PrimitiveType_Kind PrimitiveType::SHAPE;
const PrimitiveType_Kind PrimitiveType::IMAGE;
const PrimitiveType_Kind PrimitiveType::BLOB;
const PrimitiveType_Kind PrimitiveType::DATETIME;
const PrimitiveType_Kind PrimitiveType::INT;
const PrimitiveType_Kind PrimitiveType::UINT;
const PrimitiveType_Kind PrimitiveType::FLOAT;
const PrimitiveType_Kind PrimitiveType::STRING;
const PrimitiveType_Kind PrimitiveType::DECIMAL;
const PrimitiveType_Kind PrimitiveType::Kind_MIN;
const PrimitiveType_Kind PrimitiveType::Kind_MAX;
const int PrimitiveType::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PrimitiveType::kKindFieldNumber;
const int PrimitiveType::kCapacityFieldNumber;
#endif  // !_MSC_VER

PrimitiveType::PrimitiveType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrimitiveType::InitAsDefaultInstance() {
}

PrimitiveType::PrimitiveType(const PrimitiveType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrimitiveType::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  capacity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrimitiveType::~PrimitiveType() {
  SharedDtor();
}

void PrimitiveType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrimitiveType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrimitiveType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrimitiveType_descriptor_;
}

const PrimitiveType& PrimitiveType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

PrimitiveType* PrimitiveType::default_instance_ = NULL;

PrimitiveType* PrimitiveType::New() const {
  return new PrimitiveType;
}

void PrimitiveType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    capacity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrimitiveType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .blox.common.protocol.PrimitiveType.Kind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::blox::common::protocol::PrimitiveType_Kind_IsValid(value)) {
            set_kind(static_cast< ::blox::common::protocol::PrimitiveType_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }
      
      // optional uint32 capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrimitiveType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .blox.common.protocol.PrimitiveType.Kind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }
  
  // optional uint32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrimitiveType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .blox.common.protocol.PrimitiveType.Kind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }
  
  // optional uint32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrimitiveType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .blox.common.protocol.PrimitiveType.Kind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }
    
    // optional uint32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrimitiveType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrimitiveType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrimitiveType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrimitiveType::MergeFrom(const PrimitiveType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrimitiveType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveType::CopyFrom(const PrimitiveType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PrimitiveType::Swap(PrimitiveType* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrimitiveType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrimitiveType_descriptor_;
  metadata.reflection = PrimitiveType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnaryPredicateType::kNameFieldNumber;
#endif  // !_MSC_VER

UnaryPredicateType::UnaryPredicateType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnaryPredicateType::InitAsDefaultInstance() {
}

UnaryPredicateType::UnaryPredicateType(const UnaryPredicateType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnaryPredicateType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnaryPredicateType::~UnaryPredicateType() {
  SharedDtor();
}

void UnaryPredicateType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnaryPredicateType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnaryPredicateType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnaryPredicateType_descriptor_;
}

const UnaryPredicateType& UnaryPredicateType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloxCompiler_2eproto();  return *default_instance_;
}

UnaryPredicateType* UnaryPredicateType::default_instance_ = NULL;

UnaryPredicateType* UnaryPredicateType::New() const {
  return new UnaryPredicateType;
}

void UnaryPredicateType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnaryPredicateType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnaryPredicateType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnaryPredicateType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnaryPredicateType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnaryPredicateType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnaryPredicateType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnaryPredicateType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnaryPredicateType::MergeFrom(const UnaryPredicateType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnaryPredicateType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryPredicateType::CopyFrom(const UnaryPredicateType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryPredicateType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnaryPredicateType::Swap(UnaryPredicateType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnaryPredicateType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnaryPredicateType_descriptor_;
  metadata.reflection = UnaryPredicateType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace common
}  // namespace blox

// @@protoc_insertion_point(global_scope)
