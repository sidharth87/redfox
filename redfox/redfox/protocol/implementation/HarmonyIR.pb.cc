// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../interface/HarmonyIR.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hir {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* KernelControlFlowGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KernelControlFlowGraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kernel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kernel_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccessMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KernelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_HarmonyIR_2eproto() {
  protobuf_AddDesc_HarmonyIR_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HarmonyIR.proto");
  GOOGLE_CHECK(file != NULL);
  KernelControlFlowGraph_descriptor_ = file->message_type(0);
  static const int KernelControlFlowGraph_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, variables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, testcount_),
  };
  KernelControlFlowGraph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KernelControlFlowGraph_descriptor_,
      KernelControlFlowGraph::default_instance_,
      KernelControlFlowGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelControlFlowGraph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KernelControlFlowGraph));
  Variable_descriptor_ = file->message_type(1);
  static const int Variable_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, filename_),
  };
  Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Variable_descriptor_,
      Variable::default_instance_,
      Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Variable));
  Operand_descriptor_ = file->message_type(2);
  static const int Operand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, variable_),
  };
  Operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operand_descriptor_,
      Operand::default_instance_,
      Operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operand));
  Kernel_descriptor_ = file->message_type(3);
  static const int Kernel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, operands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, targets_),
  };
  Kernel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Kernel_descriptor_,
      Kernel::default_instance_,
      Kernel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kernel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Kernel));
  BasicBlock_descriptor_ = file->message_type(4);
  static const int BasicBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, kernels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, control_),
  };
  BasicBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicBlock_descriptor_,
      BasicBlock::default_instance_,
      BasicBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicBlock));
  Test_descriptor_ = file->message_type(5);
  static const int Test_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, programname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, features_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  DataType_descriptor_ = file->enum_type(0);
  AccessMode_descriptor_ = file->enum_type(1);
  KernelType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HarmonyIR_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KernelControlFlowGraph_descriptor_, &KernelControlFlowGraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Variable_descriptor_, &Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operand_descriptor_, &Operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Kernel_descriptor_, &Kernel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicBlock_descriptor_, &BasicBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HarmonyIR_2eproto() {
  delete KernelControlFlowGraph::default_instance_;
  delete KernelControlFlowGraph_reflection_;
  delete Variable::default_instance_;
  delete Variable_reflection_;
  delete Operand::default_instance_;
  delete Operand_reflection_;
  delete Kernel::default_instance_;
  delete Kernel_reflection_;
  delete BasicBlock::default_instance_;
  delete BasicBlock_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
}

void protobuf_AddDesc_HarmonyIR_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017HarmonyIR.proto\022\006hir.pb\"\237\001\n\026KernelCont"
    "rolFlowGraph\022\014\n\004name\030\001 \002(\t\022\"\n\006blocks\030\002 \003"
    "(\0132\022.hir.pb.BasicBlock\022#\n\tvariables\030\003 \003("
    "\0132\020.hir.pb.Variable\022\r\n\005entry\030\004 \002(\r\022\014\n\004ex"
    "it\030\005 \002(\r\022\021\n\ttestCount\030\006 \002(\r\"\205\001\n\010Variable"
    "\022\014\n\004name\030\001 \002(\r\022\036\n\004type\030\002 \002(\0162\020.hir.pb.Da"
    "taType\022\014\n\004size\030\003 \002(\004\022\016\n\006output\030\004 \002(\010\022\r\n\005"
    "input\030\005 \002(\010\022\014\n\004data\030\006 \001(\014\022\020\n\010filename\030\007 "
    "\001(\t\"=\n\007Operand\022 \n\004mode\030\001 \002(\0162\022.hir.pb.Ac"
    "cessMode\022\020\n\010variable\030\002 \002(\r\"z\n\006Kernel\022\014\n\004"
    "name\030\001 \002(\t\022\014\n\004code\030\002 \002(\014\022 \n\004type\030\003 \002(\0162\022"
    ".hir.pb.KernelType\022!\n\010operands\030\004 \003(\0132\017.h"
    "ir.pb.Operand\022\017\n\007targets\030\005 \003(\r\"Z\n\nBasicB"
    "lock\022\n\n\002id\030\001 \002(\r\022\037\n\007kernels\030\002 \003(\0132\016.hir."
    "pb.Kernel\022\037\n\007control\030\003 \002(\0132\016.hir.pb.Kern"
    "el\"\200\001\n\004Test\022\014\n\004name\030\004 \002(\t\022\023\n\013programName"
    "\030\003 \002(\t\022 \n\006inputs\030\001 \003(\0132\020.hir.pb.Variable"
    "\022!\n\007outputs\030\002 \003(\0132\020.hir.pb.Variable\022\020\n\010f"
    "eatures\030\005 \003(\r*I\n\010DataType\022\006\n\002I8\020\001\022\007\n\003I16"
    "\020\002\022\007\n\003I32\020\003\022\007\n\003I64\020\004\022\010\n\004I128\020\005\022\007\n\003F32\020\006\022"
    "\007\n\003F64\020\007*(\n\nAccessMode\022\006\n\002In\020\001\022\007\n\003Out\020\002\022"
    "\t\n\005InOut\020\003*\222\001\n\nKernelType\022\021\n\rComputeKern"
    "el\020\001\022\020\n\014BinaryKernel\020\002\022\023\n\017ControlDecisio"
    "n\020\003\022\027\n\023UnconditionalBranch\020\004\022\013\n\007GetSize\020"
    "\005\022\n\n\006Resize\020\006\022\016\n\nUpdateSize\020\007\022\010\n\004Exit\020\010", 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HarmonyIR.proto", &protobuf_RegisterTypes);
  KernelControlFlowGraph::default_instance_ = new KernelControlFlowGraph();
  Variable::default_instance_ = new Variable();
  Operand::default_instance_ = new Operand();
  Kernel::default_instance_ = new Kernel();
  BasicBlock::default_instance_ = new BasicBlock();
  Test::default_instance_ = new Test();
  KernelControlFlowGraph::default_instance_->InitAsDefaultInstance();
  Variable::default_instance_->InitAsDefaultInstance();
  Operand::default_instance_->InitAsDefaultInstance();
  Kernel::default_instance_->InitAsDefaultInstance();
  BasicBlock::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HarmonyIR_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HarmonyIR_2eproto {
  StaticDescriptorInitializer_HarmonyIR_2eproto() {
    protobuf_AddDesc_HarmonyIR_2eproto();
  }
} static_descriptor_initializer_HarmonyIR_2eproto_;

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccessMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessMode_descriptor_;
}
bool AccessMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KernelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KernelType_descriptor_;
}
bool KernelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KernelControlFlowGraph::kNameFieldNumber;
const int KernelControlFlowGraph::kBlocksFieldNumber;
const int KernelControlFlowGraph::kVariablesFieldNumber;
const int KernelControlFlowGraph::kEntryFieldNumber;
const int KernelControlFlowGraph::kExitFieldNumber;
const int KernelControlFlowGraph::kTestCountFieldNumber;
#endif  // !_MSC_VER

KernelControlFlowGraph::KernelControlFlowGraph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KernelControlFlowGraph::InitAsDefaultInstance() {
}

KernelControlFlowGraph::KernelControlFlowGraph(const KernelControlFlowGraph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KernelControlFlowGraph::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_ = 0u;
  exit_ = 0u;
  testcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KernelControlFlowGraph::~KernelControlFlowGraph() {
  SharedDtor();
}

void KernelControlFlowGraph::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void KernelControlFlowGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KernelControlFlowGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KernelControlFlowGraph_descriptor_;
}

const KernelControlFlowGraph& KernelControlFlowGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

KernelControlFlowGraph* KernelControlFlowGraph::default_instance_ = NULL;

KernelControlFlowGraph* KernelControlFlowGraph::New() const {
  return new KernelControlFlowGraph;
}

void KernelControlFlowGraph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    entry_ = 0u;
    exit_ = 0u;
    testcount_ = 0u;
  }
  blocks_.Clear();
  variables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KernelControlFlowGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        break;
      }
      
      // repeated .hir.pb.BasicBlock blocks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        if (input->ExpectTag(26)) goto parse_variables;
        break;
      }
      
      // repeated .hir.pb.Variable variables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_variables;
        if (input->ExpectTag(32)) goto parse_entry;
        break;
      }
      
      // required uint32 entry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_)));
          set_has_entry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exit;
        break;
      }
      
      // required uint32 exit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_)));
          set_has_exit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_testCount;
        break;
      }
      
      // required uint32 testCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_testCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &testcount_)));
          set_has_testcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KernelControlFlowGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .hir.pb.BasicBlock blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(i), output);
  }
  
  // repeated .hir.pb.Variable variables = 3;
  for (int i = 0; i < this->variables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->variables(i), output);
  }
  
  // required uint32 entry = 4;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->entry(), output);
  }
  
  // required uint32 exit = 5;
  if (has_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exit(), output);
  }
  
  // required uint32 testCount = 6;
  if (has_testcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->testcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KernelControlFlowGraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .hir.pb.BasicBlock blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blocks(i), target);
  }
  
  // repeated .hir.pb.Variable variables = 3;
  for (int i = 0; i < this->variables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->variables(i), target);
  }
  
  // required uint32 entry = 4;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->entry(), target);
  }
  
  // required uint32 exit = 5;
  if (has_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->exit(), target);
  }
  
  // required uint32 testCount = 6;
  if (has_testcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->testcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KernelControlFlowGraph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 entry = 4;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry());
    }
    
    // required uint32 exit = 5;
    if (has_exit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exit());
    }
    
    // required uint32 testCount = 6;
    if (has_testcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->testcount());
    }
    
  }
  // repeated .hir.pb.BasicBlock blocks = 2;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  // repeated .hir.pb.Variable variables = 3;
  total_size += 1 * this->variables_size();
  for (int i = 0; i < this->variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KernelControlFlowGraph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KernelControlFlowGraph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KernelControlFlowGraph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KernelControlFlowGraph::MergeFrom(const KernelControlFlowGraph& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  variables_.MergeFrom(from.variables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_entry()) {
      set_entry(from.entry());
    }
    if (from.has_exit()) {
      set_exit(from.exit());
    }
    if (from.has_testcount()) {
      set_testcount(from.testcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KernelControlFlowGraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelControlFlowGraph::CopyFrom(const KernelControlFlowGraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelControlFlowGraph::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;
  
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < variables_size(); i++) {
    if (!this->variables(i).IsInitialized()) return false;
  }
  return true;
}

void KernelControlFlowGraph::Swap(KernelControlFlowGraph* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    blocks_.Swap(&other->blocks_);
    variables_.Swap(&other->variables_);
    std::swap(entry_, other->entry_);
    std::swap(exit_, other->exit_);
    std::swap(testcount_, other->testcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KernelControlFlowGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KernelControlFlowGraph_descriptor_;
  metadata.reflection = KernelControlFlowGraph_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Variable::kNameFieldNumber;
const int Variable::kTypeFieldNumber;
const int Variable::kSizeFieldNumber;
const int Variable::kOutputFieldNumber;
const int Variable::kInputFieldNumber;
const int Variable::kDataFieldNumber;
const int Variable::kFilenameFieldNumber;
#endif  // !_MSC_VER

Variable::Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Variable::InitAsDefaultInstance() {
}

Variable::Variable(const Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Variable::SharedCtor() {
  _cached_size_ = 0;
  name_ = 0u;
  type_ = 1;
  size_ = GOOGLE_ULONGLONG(0);
  output_ = false;
  input_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Variable::~Variable() {
  SharedDtor();
}

void Variable::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variable_descriptor_;
}

const Variable& Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

Variable* Variable::default_instance_ = NULL;

Variable* Variable::New() const {
  return new Variable;
}

void Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = 0u;
    type_ = 1;
    size_ = GOOGLE_ULONGLONG(0);
    output_ = false;
    input_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .hir.pb.DataType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (hir::pb::DataType_IsValid(value)) {
            set_type(static_cast< hir::pb::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // required uint64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_output;
        break;
      }
      
      // required bool output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_)));
          set_has_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_input;
        break;
      }
      
      // required bool input = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &input_)));
          set_has_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }
      
      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filename;
        break;
      }
      
      // optional string filename = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name(), output);
  }
  
  // required .hir.pb.DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }
  
  // required bool output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output(), output);
  }
  
  // required bool input = 5;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->input(), output);
  }
  
  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }
  
  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name(), target);
  }
  
  // required .hir.pb.DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }
  
  // required bool output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output(), target);
  }
  
  // required bool input = 5;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->input(), target);
  }
  
  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }
  
  // optional string filename = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Variable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }
    
    // required .hir.pb.DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint64 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required bool output = 4;
    if (has_output()) {
      total_size += 1 + 1;
    }
    
    // required bool input = 5;
    if (has_input()) {
      total_size += 1 + 1;
    }
    
    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Variable::Swap(Variable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(output_, other->output_);
    std::swap(input_, other->input_);
    std::swap(data_, other->data_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variable_descriptor_;
  metadata.reflection = Variable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Operand::kModeFieldNumber;
const int Operand::kVariableFieldNumber;
#endif  // !_MSC_VER

Operand::Operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operand::InitAsDefaultInstance() {
}

Operand::Operand(const Operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operand::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  variable_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operand::~Operand() {
  SharedDtor();
}

void Operand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operand_descriptor_;
}

const Operand& Operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

Operand* Operand::default_instance_ = NULL;

Operand* Operand::New() const {
  return new Operand;
}

void Operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
    variable_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hir.pb.AccessMode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (hir::pb::AccessMode_IsValid(value)) {
            set_mode(static_cast< hir::pb::AccessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_variable;
        break;
      }
      
      // required uint32 variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_variable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &variable_)));
          set_has_variable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .hir.pb.AccessMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  // required uint32 variable = 2;
  if (has_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->variable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .hir.pb.AccessMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  // required uint32 variable = 2;
  if (has_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->variable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hir.pb.AccessMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // required uint32 variable = 2;
    if (has_variable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->variable());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operand::MergeFrom(const Operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_variable()) {
      set_variable(from.variable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operand::CopyFrom(const Operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Operand::Swap(Operand* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(variable_, other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operand_descriptor_;
  metadata.reflection = Operand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Kernel::kNameFieldNumber;
const int Kernel::kCodeFieldNumber;
const int Kernel::kTypeFieldNumber;
const int Kernel::kOperandsFieldNumber;
const int Kernel::kTargetsFieldNumber;
#endif  // !_MSC_VER

Kernel::Kernel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Kernel::InitAsDefaultInstance() {
}

Kernel::Kernel(const Kernel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Kernel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kernel::~Kernel() {
  SharedDtor();
}

void Kernel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void Kernel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kernel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kernel_descriptor_;
}

const Kernel& Kernel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

Kernel* Kernel::default_instance_ = NULL;

Kernel* Kernel::New() const {
  return new Kernel;
}

void Kernel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    type_ = 1;
  }
  operands_.Clear();
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Kernel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }
      
      // required bytes code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .hir.pb.KernelType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (hir::pb::KernelType_IsValid(value)) {
            set_type(static_cast< hir::pb::KernelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operands;
        break;
      }
      
      // repeated .hir.pb.Operand operands = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_operands;
        if (input->ExpectTag(40)) goto parse_targets;
        break;
      }
      
      // repeated uint32 targets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_targets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_targets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Kernel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bytes code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->code(), output);
  }
  
  // required .hir.pb.KernelType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // repeated .hir.pb.Operand operands = 4;
  for (int i = 0; i < this->operands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->operands(i), output);
  }
  
  // repeated uint32 targets = 5;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->targets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Kernel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bytes code = 2;
  if (has_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->code(), target);
  }
  
  // required .hir.pb.KernelType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // repeated .hir.pb.Operand operands = 4;
  for (int i = 0; i < this->operands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->operands(i), target);
  }
  
  // repeated uint32 targets = 5;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->targets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Kernel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bytes code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }
    
    // required .hir.pb.KernelType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .hir.pb.Operand operands = 4;
  total_size += 1 * this->operands_size();
  for (int i = 0; i < this->operands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operands(i));
  }
  
  // repeated uint32 targets = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->targets(i));
    }
    total_size += 1 * this->targets_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kernel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Kernel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Kernel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kernel::MergeFrom(const Kernel& from) {
  GOOGLE_CHECK_NE(&from, this);
  operands_.MergeFrom(from.operands_);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Kernel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kernel::CopyFrom(const Kernel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kernel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < operands_size(); i++) {
    if (!this->operands(i).IsInitialized()) return false;
  }
  return true;
}

void Kernel::Swap(Kernel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    std::swap(type_, other->type_);
    operands_.Swap(&other->operands_);
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Kernel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kernel_descriptor_;
  metadata.reflection = Kernel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicBlock::kIdFieldNumber;
const int BasicBlock::kKernelsFieldNumber;
const int BasicBlock::kControlFieldNumber;
#endif  // !_MSC_VER

BasicBlock::BasicBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicBlock::InitAsDefaultInstance() {
  control_ = const_cast< ::hir::pb::Kernel*>(&::hir::pb::Kernel::default_instance());
}

BasicBlock::BasicBlock(const BasicBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicBlock::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicBlock::~BasicBlock() {
  SharedDtor();
}

void BasicBlock::SharedDtor() {
  if (this != default_instance_) {
    delete control_;
  }
}

void BasicBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicBlock_descriptor_;
}

const BasicBlock& BasicBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

BasicBlock* BasicBlock::default_instance_ = NULL;

BasicBlock* BasicBlock::New() const {
  return new BasicBlock;
}

void BasicBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_control()) {
      if (control_ != NULL) control_->::hir::pb::Kernel::Clear();
    }
  }
  kernels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kernels;
        break;
      }
      
      // repeated .hir.pb.Kernel kernels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kernels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kernels;
        if (input->ExpectTag(26)) goto parse_control;
        break;
      }
      
      // required .hir.pb.Kernel control = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .hir.pb.Kernel kernels = 2;
  for (int i = 0; i < this->kernels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kernels(i), output);
  }
  
  // required .hir.pb.Kernel control = 3;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->control(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .hir.pb.Kernel kernels = 2;
  for (int i = 0; i < this->kernels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kernels(i), target);
  }
  
  // required .hir.pb.Kernel control = 3;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->control(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .hir.pb.Kernel control = 3;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }
    
  }
  // repeated .hir.pb.Kernel kernels = 2;
  total_size += 1 * this->kernels_size();
  for (int i = 0; i < this->kernels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kernels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicBlock::MergeFrom(const BasicBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  kernels_.MergeFrom(from.kernels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_control()) {
      mutable_control()->::hir::pb::Kernel::MergeFrom(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicBlock::CopyFrom(const BasicBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < kernels_size(); i++) {
    if (!this->kernels(i).IsInitialized()) return false;
  }
  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void BasicBlock::Swap(BasicBlock* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    kernels_.Swap(&other->kernels_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicBlock_descriptor_;
  metadata.reflection = BasicBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Test::kNameFieldNumber;
const int Test::kProgramNameFieldNumber;
const int Test::kInputsFieldNumber;
const int Test::kOutputsFieldNumber;
const int Test::kFeaturesFieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Test::InitAsDefaultInstance() {
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Test::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  programname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  SharedDtor();
}

void Test::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (programname_ != &::google::protobuf::internal::kEmptyString) {
    delete programname_;
  }
  if (this != default_instance_) {
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HarmonyIR_2eproto();  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_programname()) {
      if (programname_ != &::google::protobuf::internal::kEmptyString) {
        programname_->clear();
      }
    }
  }
  inputs_.Clear();
  outputs_.Clear();
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hir.pb.Variable inputs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_inputs;
        if (input->ExpectTag(18)) goto parse_outputs;
        break;
      }
      
      // repeated .hir.pb.Variable outputs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputs;
        if (input->ExpectTag(26)) goto parse_programName;
        break;
      }
      
      // required string programName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_programName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_programname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->programname().data(), this->programname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_features;
        break;
      }
      
      // repeated uint32 features = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_features())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_features())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hir.pb.Variable inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inputs(i), output);
  }
  
  // repeated .hir.pb.Variable outputs = 2;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputs(i), output);
  }
  
  // required string programName = 3;
  if (has_programname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->programname().data(), this->programname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->programname(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // repeated uint32 features = 5;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->features(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hir.pb.Variable inputs = 1;
  for (int i = 0; i < this->inputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inputs(i), target);
  }
  
  // repeated .hir.pb.Variable outputs = 2;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outputs(i), target);
  }
  
  // required string programName = 3;
  if (has_programname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->programname().data(), this->programname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->programname(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // repeated uint32 features = 5;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->features(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string programName = 3;
    if (has_programname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->programname());
    }
    
  }
  // repeated .hir.pb.Variable inputs = 1;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }
  
  // repeated .hir.pb.Variable outputs = 2;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }
  
  // repeated uint32 features = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->features(i));
    }
    total_size += 1 * this->features_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_programname()) {
      set_programname(from.programname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < inputs_size(); i++) {
    if (!this->inputs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < outputs_size(); i++) {
    if (!this->outputs(i).IsInitialized()) return false;
  }
  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(programname_, other->programname_);
    inputs_.Swap(&other->inputs_);
    outputs_.Swap(&other->outputs_);
    features_.Swap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace hir

// @@protoc_insertion_point(global_scope)
